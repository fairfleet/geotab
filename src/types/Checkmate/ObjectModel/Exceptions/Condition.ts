//     This code was generated by a Reinforced.Typings tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

import { Entity } from "../Entity";
import { ConditionType } from "./ConditionType";
import { Rule } from "./Rule";
import { Device } from "../Device";
import { Diagnostic } from "../Engine/Diagnostic";
import { Driver } from "../Driver";
import { WorkTime } from "../WorkTime";
import { Zone } from "../Zone";
import { ZoneType } from "../ZoneType";

/**
 *  Conditions model the logic that govern a {@link Rule} and can apply to many different types of data and entities. Conditions are structured in hierarchical tree. A condition's type (see {@link ConditionType}) defines the meaning of each condition in the tree and can be an operator, special operator, data or an asset.
 *  Depending on the type of condition, it can have a minimum of 0 and maximum of 1 entity properties (Device, Driver, Diagnostic, WorkTime, Zone or ZoneType) defined per condition. Operator conditions (OR, AND, &amp;gt;, &amp;lt;, ==, NOT) will not have any entity properties populated. Special Operator conditions evaluate against special types of data such as Aux data, Zones, WorkHours, etc. and may have the entity property populated and/or a child condition populated with a Data condition. Asset conditions will only have the asset entity property populated.
 *  The unit of measure for data is described either by the related {@link Diagnostic}'s {@link UnitOfMeasure} or as follows:
 *  <list><item><description>
 *  Distance: Meters (m)
 *  </description></item><item><description>
 *  Speed: Kilometers Per Hour (km/h)
 *  </description></item><item><description>
 *  Duration: Seconds
 *  </description></item></list>
 *  A tree of conditions can define simple or complex rules and can be very powerful. Please take into consideration all possible consequences of a series of rules. Overly complex, poorly written or an excessive number of rules can have undesirable performance effects.
 *
 * @remarks This class is in development. Its public interface is a subject to change.
 */
export interface Condition extends Entity {
  /** Gets or sets child condition(s) of this condition. */
  children: Condition[];
  /** Gets or sets the {@link ConditionType} defines the meaning of this condition. */
  conditionType: ConditionType;
  /** Gets or sets specified {@link Device} associated with the condition. */
  device: Device;
  /** Gets or sets the {@link Diagnostic} to compare the value of. */
  diagnostic: Diagnostic;
  /** Gets or sets specified {@link Driver} associated with the condition. */
  driver: Driver;
  /** Gets or sets the Condition that this Condition is a link of. */
  linkTarget: Condition;
  /** Gets or sets the parent Condition for this Condition. Null for root condition. */
  parent: Condition;
  /** Gets or sets the {@link Rule} that this condition applies to. */
  rule: Rule;
  /** Gets or sets the sequence that defines the {@link Condition}'s relative order in a list of Children {@link Condition}s of the parent {@link Condition}. */
  sequence: number;
  /** Gets the name of the metric used. */
  unit: string;
  /** Gets or sets the specified value to evaluate against. */
  value: number;
  /** Gets or sets the {@link WorkTime} that the event must occur inside/outside of for the violation to occur. */
  workTime: WorkTime;
  /** Gets or sets specified {@link Zone} associated with the condition. */
  zone: Zone;
  /** Gets or sets specified {@link ZoneType}. */
  zoneType: ZoneType;
}
