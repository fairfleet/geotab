//     This code was generated by a Reinforced.Typings tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

import { Search } from "../Search";
import { DeviceSearch } from "../DeviceSearch";
import { RuleSearch } from "./RuleSearch";
import { UserSearch } from "../UserSearch";
import { ZoneSearch } from "../ZoneSearch";

/**
 *  The object used to specify the arguments when searching for {@link ExceptionEvent}.
 *  This search has been designed to work efficiently with these combinations of parameters:<list><item><description>Id</description></item><item><description>DeviceSearch + RuleSearch + FromDate and/or ToDate</description></item></list>
 */
export interface ExceptionEventSearch extends Search {
  /**
   * Gets or sets filter by the {@link DeviceSearch} options. Providing a Device ID will
   *  search for any Exception Events recorded for that Device.
   *  Providing Groups will search Exception Events recorded for Devices that are members of the provided
   *  GroupSearch(s) or their children.
   *  Available DeviceSearch options are:.
   *  <list><item><description>Id</description></item><item><description>Groups</description></item></list>
   */
  deviceSearch: DeviceSearch;
  /** Gets or sets search for Exception Events that occurred at this date or after. */
  fromDate: Date;
  /** Gets or sets include dismissed events. */
  includeDismissedEvents: boolean;
  /**
   * Gets or sets search for {@link ExceptionEvent}s that have been invalidated because of new data being processed.
   *  The default value is [false] using "Get" API and [true] using "GetFeed" API.
   */
  includeInvalidated: boolean;
  /** Gets or sets the flag to include metadata. */
  includeMetadata: boolean;
  /**
   * Gets or sets the maximum row version of the
   *  {@link ExceptionEvent} search criteria.
   */
  maxVersion: number;
  /**
   * Gets or sets filter by the {@link RuleSearch} options. Providing a Rule ID
   *  will search for any Exception Events recorded for that Rule.
   *  Available RuleSearch options are:.
   *  <list><item><description>Id</description></item></list>
   */
  ruleSearch: RuleSearch;
  /** Gets or sets search for Exception Events that occurred at this date or before. */
  toDate: Date;
  /**
   * Gets or sets the filter by the {@link UserSearch} options. Providing a User ID will search
   *  for any Exception Events recorded for that User.
   *  Providing Groups will search Exception Events recorded for Users that are members of the provided GroupSearch(s) or
   *  their children.
   *  Available UserSearch options are:
   *  <list><item><description>Id</description></item><item><description>DriverGroups</description></item><item><description>DriverGroupFilterCondition</description></item><item><description>CompanyGroups</description></item><item><description>UserGroupFilterCondition</description></item></list><para />
   *  Cannot be used with DeviceSearch.
   */
  userSearch: UserSearch;
  /**
   * Gets or sets the row version of the {@link ExceptionEvent}
   *  search criteria.
   */
  version: number;
  /**
   * Gets or sets filter by the {@link ZoneSearch} options.
   *  Providing a zone ID will search for Exception Events recorded with ZoneId metadata.
   *  Providing the Groups will search for Exception Events recorded with ZoneId metadata of Zones that are members of the provided
   *  GroupSearch(s) or their children.
   *  Available ZoneSearch options are:.
   *  <list><item><description>Id</description></item><item><description>Groups</description></item></list>
   */
  zoneSearch: ZoneSearch;
}
