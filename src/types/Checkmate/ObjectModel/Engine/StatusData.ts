//     This code was generated by a Reinforced.Typings tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

import { EntityWithVersion } from "../EntityWithVersion";
import { Device } from "../Device";
import { Diagnostic } from "./Diagnostic";
import { Controller } from "./Controller";

/**
 *  A record that represents an engine status record from the
 *  engine system of the specific {@link Device}.
 */
export interface StatusData extends EntityWithVersion {
  /** Gets or sets the {@link Controller} for the {@link Device} specified. */
  controller: Controller;
  /** Gets or sets the recorded value of the diagnostic parameter. */
  data: number;
  /** Gets or sets the date and time of the logged event. */
  dateTime: Date;
  /** Gets or sets the StatusData for the {@link Device} specified. */
  device: Device;
  /** Gets or sets the {@link Diagnostic} for the {@link Device} specified. */
  diagnostic: Diagnostic;
  /**
   * Gets or sets a value indicating whether this instance is the last active record in the vehicle's active period. Possible values are:.
   *  <list type="bullet"><item><description>false: The record is within the active period and not the last active record</description></item><item><description>true: The record is within the active period and is the last active record</description></item><item><description>null: The record is not within the active period or the diagnostic does not observe active state (ex. Accelerometer)</description></item></list>
   */
  isLastActive: boolean;
}
