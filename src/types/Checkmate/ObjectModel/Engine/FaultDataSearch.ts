//     This code was generated by a Reinforced.Typings tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

import { Search } from "../Search";
import { DeviceSearch } from "../DeviceSearch";
import { DiagnosticSearch } from "./DiagnosticSearch";
import { GroupSearch } from "../GroupSearch";
import { FaultState } from "./FaultState";
import { ControllerSearch } from "./ControllerSearch";
import { GroupFilterCondition } from "../GroupFilterCondition";

/**
 *  The object used to specify the arguments when searching for a
 *  {@link FaultData}.
 *  This search has been designed to work efficiently with these combinations of parameters:<list><item><description>Id</description></item><item><description>DeviceSearch + DiagnosticSearch + FromDate and/or ToDate</description></item><item><description>GroupSearch + DiagnosticSearch + FromDate and/or ToDate</description></item></list>
 */
export interface FaultDataSearch extends Search {
  /**
   * Gets or sets the search options which are used to search for fault data for a controller
   *  {@link FaultDataSearch.ControllerSearch}
   *  by Id. Available ControllerSearch options are:.
   *  <list><item><description>Id</description></item></list>
   */
  controllerSearch: ControllerSearch;
  /**
   * Gets or sets search for {@link FaultData}(s) from a device that matches the
   *  {@link DeviceSearch} Id or in the Groups specified. This includes archived and deleted devices.
   *  Available DeviceSearch options are:.
   *  <list><item><description>Id</description></item><item><description>Groups</description></item></list>
   */
  deviceSearch: DeviceSearch;
  /**
   * Gets or sets search for FaultData recorded for the diagnostic code using the
   *  {@link DiagnosticSearch} Id.
   *  Available DiagnosticSearch options are:.
   *  <list><item><description>Id</description></item><item><description>Code</description></item><item><description>Name</description></item><item><description>SourceSearch.Name</description></item><item><description>SourceSearch.Id</description></item></list>
   */
  diagnosticSearch: DiagnosticSearch;
  /** Gets or sets the from date. The FaultData logs are searched for events which were recorded on or after this date. */
  fromDate: Date;
  /** Gets or sets for fault data group list search. */
  groupFilterCondition: GroupFilterCondition;
  /**
   * Gets or sets the groups which should be searched.
   *  {@link GroupSearch}(s).
   *  Available GroupSearch options are:.
   *  <list><item><description>Id</description></item></list>
   */
  groups: GroupSearch[];
  /** Gets or sets the to state of the fault. The Fault data logs are searched for events which are under the this state. */
  state: FaultState;
  /** Gets or sets the to date. The Fault data logs are searched for events which were recorded on or before this date. */
  toDate: Date;
}
