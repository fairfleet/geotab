//     This code was generated by a Reinforced.Typings tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

import { EntityWithVersion } from "./EntityWithVersion";
import { User } from "./User";
import { Group } from "./Group";
import { DVIRDefect } from "./DVIRDefect";
import { Device } from "./Device";
import { Trailer } from "./Trailer";
import { DVIRLogType } from "./DVIRLogType";
import { AddressLookupData } from "./AddressLookupData";

/**
 *  A DVIRLog is a Driver Vehicle Inspection Report which is prepared by a driver
 *  regarding defects in parts of a vehicle associated with a {@link Device} or
 *  {@link Trailer}. Once the report is completed
 *  with optional driver remarks, the DVIR log will be acted upon, and marked as repairs made or not necessary
 *  (usually by another {@link User}). The driver then will mark the log as
 *  certified for being safe or unsafe to operate based on the effectiveness of any repairs made or comments for repairs not performed.
 */
export interface DVIRLog extends EntityWithVersion {
  /** Gets or sets the authority address for the driver at the time of this log. Maximum length [255] Default [""]. */
  authorityAddress: string;
  /** Gets or sets the authority name for the driver at the time of this log. Maximum length [255] Default [""]. */
  authorityName: string;
  /**
   * Gets or sets the {@link User} who certified the repairs (or comments if no repairs were made) to the
   *  {@link Device} or
   *  {@link Trailer}.
   */
  certifiedBy: User;
  /**
   * Gets or sets the date the {@link Device} or
   *  {@link Trailer} was certified.
   */
  certifyDate: Date;
  /**
   * Gets or sets the remark recorded by the {@link User} who certified the repairs
   *  (or no repairs made) to the {@link Device} or
   *  {@link Trailer}.
   */
  certifyRemark: string;
  /** Gets or sets the date and time the log was created. */
  dateTime: Date;
  /** Gets or sets the defect list {@link Group} of the log. */
  defectList: Group;
  /** Gets or sets the list of defect {@link Group}(s) for this log. */
  defects: Group[];
  /**
   * Gets or sets the {@link Device} associated with this log.
   *  Either a Device or a {@link Trailer} is defined for a log, not both (if
   *  the device is set, trailer must be null).
   */
  device: Device;
  /** Gets or sets the {@link User} who created the log. */
  driver: User;
  /** Gets or sets the remark recorded by the driver for this log. */
  driverRemark: string;
  /** Gets or sets the list of DVIRDefects {@link DVIRDefect}(s) for this log. */
  dvirDefects: DVIRDefect[];
  /** Gets or sets the unique identifier for this entity. See {@link Id}. */
  id: string;
  /**
   * Gets or sets a value indicating whether the DVIR log was inspected by the driver. If false, the log was
   *  inspected by an inspector. Default [true].
   */
  isInspectedByDriver: boolean;
  /** Gets or sets a value indicating whether the DVIR log was marked as rejected by the driver. Default [false]. */
  isRejected: boolean;
  /**
   * Gets or sets identifier for whether or not the {@link Device} or
   *  {@link Trailer} was certified as safe to operate.
   */
  isSafeToOperate: boolean;
  /** Gets or sets the load height, if it was manually recorded by the driver. Default [null]. */
  loadHeight: number;
  /** Gets or sets the load width, if it was manually recorded by the driver. Default [null]. */
  loadWidth: number;
  /** Gets or sets an object with the location information of the log. */
  location: AddressLookupData;
  /** Gets or sets the {@link DVIRLogType} of the log. Default [Unknown]. */
  logType: DVIRLogType;
  /** Gets or sets the odometer or hubometer of the vehicle or trailer, respectively, if it was manually recorded by the driver. Default [null]. */
  odometer: number;
  /**
   * Gets or sets the date the {@link Device} or
   *  {@link Trailer} was repaired.
   */
  repairDate: Date;
  /**
   * Gets or sets the {@link User} who repaired the
   *  {@link Device} or
   *  {@link Trailer}.
   */
  repairedBy: User;
  /**
   * Gets or sets the remark recorded by the {@link User} who repaired the
   *  {@link Device} or
   *  {@link Trailer}.
   */
  repairRemark: string;
  /**
   * Gets or sets the {@link Trailer} associated with this log.
   *  Either a {@link Device} or a Trailer is defined for a log, not both (if
   *  the trailer is set, device must be null).
   */
  trailer: Trailer;
}
