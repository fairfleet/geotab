//     This code was generated by a Reinforced.Typings tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

import { Search } from "./Search";
import { DeviceSearch } from "./DeviceSearch";
import { EventRuleSearch } from "./EventRuleSearch";

/**
 *  The object used to specify the arguments when searching for
 *  {@link EventOccurrence}(s).
 *
 * @deprecated
 */
export interface EventOccurrenceSearch extends Search {
  /** Gets or sets a value indicating whether gets or sets search for active {@link EventOccurrence}s recorded Only. */
  activeOnly: boolean;
  /** Gets or sets a list of Device Ids to search by. {@link Device} */
  deviceIds: string[];
  /**
   * Gets or sets search for {@link EventOccurrence}s matching this
   *  {@link DeviceSearch}. Providing a device ID will
   *  search for any EventOccurrences that are assigned to that Device.
   *  Providing the Groups will search for EventOccurrences for that have Devices in that group.
   *  Available DeviceSearch options are:.
   *  <list><item><description>Id</description></item><item><description>Groups</description></item></list>
   */
  deviceSearch: DeviceSearch;
  /** Gets or sets a list of EventRule Ids to search by. {@link EventRule} */
  eventRuleIds: string[];
  /**
   * Gets or sets search for {@link EventOccurrence}s matching this
   *  {@link EventRuleSearch}. Providing a event rule id will
   *  search for any EventOccurrences that are assigned to that Event Rule.
   *  Providing the Groups will search for EventOccurrences for that have Event Rules in that group.
   *  Available EventRuleSearch options are:.
   *  <list><item><description>Id</description></item><item><description>Groups</description></item><item><description>IncludeGroups</description></item></list>
   */
  eventRuleSearch: EventRuleSearch;
  /** Gets or sets a list of EventType Ids to search by. {@link EventType} */
  eventTypeIds: string[];
  /** Gets or sets search for {@link EventOccurrence}s recorded at this date or after. */
  fromDate: Date;
  /** Gets or sets a value indicating whether event has historic devices. */
  includeHistoricDevices: boolean;
  /** Gets or sets a value indicating whether event is skipped. */
  includeSkipped: boolean;
  /** Gets or sets a value indicating whether searching for 'skipped' maintenance. */
  includeSkippedMaintenance: boolean;
  /** Gets or sets a value indicating whether searching for 'unplanned maintenance'. */
  includeUnplannedMaintenance: boolean;
  /** Gets or sets search for entities that contain specific keywords in all wildcard string-searchable fields. */
  keywords: string[];
  /** Gets or sets a value indicating whether the search returns latest {@link EventOccurrence} records only. */
  latestRecordsOnly: boolean;
  /** Gets or sets gets maximum Id of the search criteria. */
  maxId: string;
  /** Gets or sets gets minimum Id of the search criteria. */
  minId: string;
  /** Gets or sets a value indicating whether search returns linkage {@link EventOccurrence} records for once-off {@link EventRule}. */
  returnLinkageEvents: boolean;
  /** Gets or sets search for {@link EventOccurrence}s recorded at this date or before. */
  toDate: Date;
}
