//     This code was generated by a Reinforced.Typings tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

export enum KnownId {
  /** Gets the controller parking brake controller identifier. */
  ControllerParkingBrakeControllerId = "ControllerParkingBrakeControllerId",
  /** Gets the controller particulate trap system identifier. */
  ControllerParticulateTrapSystemId = "ControllerParticulateTrapSystemId",
  /** Gets the controller passenger operator climate control1 identifier. */
  ControllerPassengerOperatorClimateControl1Id = "ControllerPassengerOperatorClimateControl1Id",
  /** Gets the controller passenger operator climate control no2 identifier. */
  ControllerPassengerOperatorClimateControlNo2Id = "ControllerPassengerOperatorClimateControlNo2Id",
  /** Gets the controller power take off front secondary identifier. */
  ControllerPowerTakeOffFrontSecondaryId = "ControllerPowerTakeOffFrontSecondaryId",
  /** Gets the controller propulsion battery charger identifier. */
  ControllerPropulsionBatteryChargerId = "ControllerPropulsionBatteryChargerId",
  /** Gets the controller proximity detector front identifier. */
  ControllerProximityDetectorFrontId = "ControllerProximityDetectorFrontId",
  /** Gets the controller proximity detector rear identifier. */
  ControllerProximityDetectorRearId = "ControllerProximityDetectorRearId",
  /** Gets the controller ramp control identifier. */
  ControllerRampControlId = "ControllerRampControlId",
  /** Gets the controller rear axle steering controller identifier. */
  ControllerRearAxleSteeringControllerId = "ControllerRearAxleSteeringControllerId",
  /** Gets the controller rear axle steering controller no1 identifier. */
  ControllerRearAxleSteeringControllerNo1Id = "ControllerRearAxleSteeringControllerNo1Id",
  /** Gets the controller retarder driveline identifier. */
  ControllerRetarderDrivelineId = "ControllerRetarderDrivelineId",
  /** Gets the controller retarder engine identifier. */
  ControllerRetarderEngineId = "ControllerRetarderEngineId",
  /** Gets the controller retarder exhaust engine no1 identifier. */
  ControllerRetarderExhaustEngineNo1Id = "ControllerRetarderExhaustEngineNo1Id",
  /** Gets the controller retarder exhaust engine no2 identifier. */
  ControllerRetarderExhaustEngineNo2Id = "ControllerRetarderExhaustEngineNo2Id",
  /** Gets the controller road speed indicator identifier. */
  ControllerRoadSpeedIndicatorId = "ControllerRoadSpeedIndicatorId",
  /** Gets the controller safety restraint system identifier. */
  ControllerSafetyRestraintSystemId = "ControllerSafetyRestraintSystemId",
  /** Gets the controller seat control no1 identifier. */
  ControllerSeatControlNo1Id = "ControllerSeatControlNo1Id",
  /** Gets the controller seat control no2 identifier. */
  ControllerSeatControlNo2Id = "ControllerSeatControlNo2Id",
  /** Gets the controller shift console primary identifier. */
  ControllerShiftConsolePrimaryId = "ControllerShiftConsolePrimaryId",
  /** Gets the controller shift console secondary identifier. */
  ControllerShiftConsoleSecondaryId = "ControllerShiftConsoleSecondaryId",
  /** Gets the controller starter system identifier. */
  ControllerStarterSystemId = "ControllerStarterSystemId",
  /** Gets the controller steering column unit identifier. */
  ControllerSteeringColumnUnitId = "ControllerSteeringColumnUnitId",
  /** Gets the controller steering controller identifier. */
  ControllerSteeringControllerId = "ControllerSteeringControllerId",
  /** Gets the Controller suspension drive axle no1 identifier. */
  ControllerSuspensionDriveAxleNo1Id = "ControllerSuspensionDriveAxleNo1Id",
  /** Gets the controller suspension drive axle no2 identifier. */
  ControllerSuspensionDriveAxleNo2Id = "ControllerSuspensionDriveAxleNo2Id",
  /** Gets the controller suspension power unit identifier. */
  ControllerSuspensionPowerUnitId = "ControllerSuspensionPowerUnitId",
  /** Gets the controller suspension steer axle identifier. */
  ControllerSuspensionSteerAxleId = "ControllerSuspensionSteerAxleId",
  /** Gets the controller suspension system controller no1 identifier. */
  ControllerSuspensionSystemControllerNo1Id = "ControllerSuspensionSystemControllerNo1Id",
  /** Gets the controller suspension system controller no2 identifier. */
  ControllerSuspensionSystemControllerNo2Id = "ControllerSuspensionSystemControllerNo2Id",
  /** Gets the controller suspension trailer identifier. */
  ControllerSuspensionTrailerId = "ControllerSuspensionTrailerId",
  /** Gets the controller tire pressure controller identifier. */
  ControllerTirePressureControllerId = "ControllerTirePressureControllerId",
  /** Gets the controller tires control unit identifier. */
  ControllerTiresControlUnitId = "ControllerTiresControlUnitId",
  /** Gets the controller tires power unit identifier. */
  ControllerTiresPowerUnitId = "ControllerTiresPowerUnitId",
  /** Gets the controller tires trailer identifier. */
  ControllerTiresTrailerId = "ControllerTiresTrailerId",
  /** Gets the controller tires trailer no2 identifier. */
  ControllerTiresTrailerNo2Id = "ControllerTiresTrailerNo2Id",
  /** Gets the controller tires trailer no3 identifier. */
  ControllerTiresTrailerNo3Id = "ControllerTiresTrailerNo3Id",
  /** Gets the controller tractor trailer bridge no1 identifier. */
  ControllerTractorTrailerBridgeNo1Id = "ControllerTractorTrailerBridgeNo1Id",
  /** Gets the controller transmission additional hybrid control module identifier. */
  ControllerTransmissionAdditionalHybridControlModuleId = "ControllerTransmissionAdditionalHybridControlModuleId",
  /** Gets the controller transmission display primary identifier. */
  ControllerTransmissionDisplayPrimaryId = "ControllerTransmissionDisplayPrimaryId",
  /** Gets the controller transmission display secondary identifier. */
  ControllerTransmissionDisplaySecondaryId = "ControllerTransmissionDisplaySecondaryId",
  /** Gets the controller transmission identifier. */
  ControllerTransmissionId = "ControllerTransmissionId",
  /** Gets the controller transmission no1 identifier. */
  ControllerTransmissionNo1Id = "ControllerTransmissionNo1Id",
  /** Gets the controller transmission no2 identifier. */
  ControllerTransmissionNo2Id = "ControllerTransmissionNo2Id",
  /** Gets the controller vehicle dynamic stability controller identifier. */
  ControllerVehicleDynamicStabilityControllerId = "ControllerVehicleDynamicStabilityControllerId",
  /** Gets the controller vehicle management system identifier. */
  ControllerVehicleManagementSystemId = "ControllerVehicleManagementSystemId",
  /** Gets the controller vehicle management system no2 identifier. */
  ControllerVehicleManagementSystemNo2Id = "ControllerVehicleManagementSystemNo2Id",
  /** Gets the controller vehicle management system no3 identifier. */
  ControllerVehicleManagementSystemNo3Id = "ControllerVehicleManagementSystemNo3Id",
  /** Gets the controller vehicle navigation identifier. */
  ControllerVehicleNavigationId = "ControllerVehicleNavigationId",
  /** Gets the controller vehicle navigation unit identifier. */
  ControllerVehicleNavigationUnitId = "ControllerVehicleNavigationUnitId",
  /** Gets the controller vehicle sensors to data converter identifier. */
  ControllerVehicleSensorsToDataConverterId = "ControllerVehicleSensorsToDataConverterId",
  /** Gets the controller virtual terminal identifier. */
  ControllerVirtualTerminalId = "ControllerVirtualTerminalId",
  /** Gets the controller water pump controller identifier. */
  ControllerWaterPumpControllerId = "ControllerWaterPumpControllerId",
  /** Gets the identifier for the fixed controller assigned for manufacturer specific faults. */
  ControllerProprietaryFaultId = "ControllerProprietaryFaultId",
  /** Gets the identifier for the fixed controller assigned for legacy manufacturer specific faults. */
  ControllerLegacyFaultId = "ControllerLegacyFaultId",
  /** Gets the identifier for the fixed controller assigned for GMCCC specific faults. */
  ControllerGmcccFaultId = "ControllerGmcccFaultId",
  /** Gets the identifier for the fixed controller assigned for BRP specific faults. */
  ControllerBrpFaultId = "ControllerBrpFaultId",
  /** Gets the diagnostic ABS system active identifier. */
  DiagnosticAbsSystemActiveId = "DiagnosticAbsSystemActiveId",
  /** Gets the diagnostic ABS warning light identifier. */
  DiagnosticAbsWarningLightId = "DiagnosticAbsWarningLightId",
  /** Gets the diagnostic acceleration event before calibration identifier. */
  DiagnosticAccelerationEventbeforeCalibrationId = "DiagnosticAccelerationEventbeforeCalibrationId",
  /** Gets the diagnostic acceleration forward braking identifier. */
  DiagnosticAccelerationForwardBrakingId = "DiagnosticAccelerationForwardBrakingId",
  /** Gets the diagnostic acceleration side to side identifier. */
  DiagnosticAccelerationSideToSideId = "DiagnosticAccelerationSideToSideId",
  /** Gets the diagnostic acceleration up down identifier. */
  DiagnosticAccelerationUpDownId = "DiagnosticAccelerationUpDownId",
  /** Gets the diagnostic accelerometer calibrated identifier. */
  DiagnosticAccelerometerCalibratedId = "DiagnosticAccelerometerCalibratedId",
  /** Gets the diagnostic accelerometer failed to initialize identifier. */
  DiagnosticAccelerometerFailedToInitializeId = "DiagnosticAccelerometerFailedToInitializeId",
  /** Gets the diagnostic Bluetooth beacon in range identifier. */
  DiagnosticBluetoothBeaconInRangeId = "DiagnosticBluetoothBeaconInRangeId",
  /** Gets the diagnostic Bluetooth RSSI ID. */
  DiagnosticBluetoothRssiId = "DiagnosticBluetoothRssiId",
  /** Gets the diagnostic Bluetooth beacon battery level identifier. */
  DiagnosticBluetoothBeaconBatteryLevelId = "DiagnosticBluetoothBeaconBatteryLevelId",
  /** Gets the diagnostic Bluetooth beacon category identifier. */
  DiagnosticBluetoothBeaconCategoryId = "DiagnosticBluetoothBeaconCategory",
  /** Gets the diagnostic Bluetooth beacon live impact identifier. */
  DiagnosticBluetoothBeaconLiveImpactId = "DiagnosticBluetoothBeaconLiveImpactId",
  /** Gets the diagnostic Bluetooth beacon live temperature identifier. */
  DiagnosticBluetoothBeaconLiveTemperatureId = "DiagnosticBluetoothBeaconLiveTemperature",
  /** Gets the diagnostic Bluetooth beacon live light identifier. */
  DiagnosticBluetoothBeaconLiveLightId = "DiagnosticBluetoothBeaconLiveLightId",
  /** Gets the diagnostic Bluetooth beacon live relative humidity identifier. */
  DiagnosticBluetoothBeaconLiveRelativeHumidityId = "DiagnosticBluetoothBeaconLiveRelativeHumidityId",
  /** Gets the diagnostic Bluetooth beacon live barometric pressure identifier. */
  DiagnosticBluetoothBeaconLiveBarometricPressureId = "DiagnosticBluetoothBeaconLiveBarometricPressureId",
  /** Gets the diagnostic Bluetooth beacon live altitude identifier. */
  DiagnosticBluetoothBeaconLiveAltitudeId = "DiagnosticBluetoothBeaconLiveAltitudeId",
  /** Gets the diagnostic Bluetooth beacon particulate matter less than 1 micrometer identifier. */
  DiagnosticBluetoothBeaconParticulateMatter1MicronId = "DiagnosticBluetoothBeaconParticulateMatter1MicronId",
  /** Gets the diagnostic Bluetooth beacon particulate matter less than 2.5 micrometers identifier. */
  DiagnosticBluetoothBeaconParticulateMatter2P5MicronId = "DiagnosticBluetoothBeaconParticulateMatter2P5MicronId",
  /** Gets the diagnostic Bluetooth beacon particulate matter less than 10 micrometers identifier. */
  DiagnosticBluetoothBeaconParticulateMatter10MicronId = "DiagnosticBluetoothBeaconParticulateMatter10MicronId",
  /** Gets the diagnostic Bluetooth Nitric Oxide (NO) concentration identifier. */
  DiagnosticBluetoothNitricOxideConcentrationId = "DiagnosticBluetoothNitricOxideConcentrationId",
  /** Gets the diagnostic Bluetooth Nitrogen Dioxide (NO2) concentration identifier. */
  DiagnosticBluetoothNitrogenDioxideConcentrationId = "DiagnosticBluetoothNitrogenDioxideConcentrationId",
  /** Gets the diagnostic Bluetooth Carbon Monoxide (CO) concentration identifier. */
  DiagnosticBluetoothCarbonMonoxideConcentrationId = "DiagnosticBluetoothCarbonMonoxideConcentrationId",
  /** Gets the diagnostic Bluetooth Ammonia (NH3) concentration identifier. */
  DiagnosticBluetoothAmmoniaConcentrationId = "DiagnosticBluetoothAmmoniaConcentrationId",
  /** Gets the diagnostic Bluetooth Methane (CH4) concentration identifier. */
  DiagnosticBluetoothMethaneConcentrationId = "DiagnosticBluetoothMethaneConcentrationId",
  /** Gets the diagnostic Bluetooth Ethanol (C2H5OH) concentration identifier. */
  DiagnosticBluetoothEthanolConcentrationId = "DiagnosticBluetoothEthanolConcentrationId",
  /** Gets the diagnostic Bluetooth Hydrogen (H2) concentration identifier. */
  DiagnosticBluetoothHydrogenConcentrationId = "DiagnosticBluetoothHydrogenConcentrationId",
  /** Gets the diagnostic Bluetooth Carbon Dioxide (CO2) concentration identifier. */
  DiagnosticBluetoothCarbonDioxideConcentrationId = "DiagnosticBluetoothCarbonDioxideConcentrationId",
  /** Gets the diagnostic Bluetooth fuel level identifier. */
  DiagnosticBluetoothFuelLevelId = "DiagnosticBluetoothFuelLevelId",
  /** Gets the diagnostic Bluetooth generic byte for identifer 230. */
  DiagnosticBluetoothGenericByte230Id = "DiagnosticBluetoothGenericByte230Id",
  /** Gets the diagnostic Bluetooth generic byte for identifer 231. */
  DiagnosticBluetoothGenericByte231Id = "DiagnosticBluetoothGenericByte231Id",
  /** Gets the diagnostic Bluetooth generic byte for identifer 232. */
  DiagnosticBluetoothGenericByte232Id = "DiagnosticBluetoothGenericByte232Id",
  /** Gets the diagnostic Bluetooth generic byte for identifer 233. */
  DiagnosticBluetoothGenericByte233Id = "DiagnosticBluetoothGenericByte233Id",
  /** Gets the diagnostic Bluetooth generic byte for identifer 234. */
  DiagnosticBluetoothGenericByte234Id = "DiagnosticBluetoothGenericByte234Id",
  /** Gets the diagnostic Bluetooth generic byte for identifer 235. */
  DiagnosticBluetoothGenericByte235Id = "DiagnosticBluetoothGenericByte235Id",
  /** Gets the diagnostic Bluetooth generic byte for identifer 236. */
  DiagnosticBluetoothGenericByte236Id = "DiagnosticBluetoothGenericByte236Id",
  /** Gets the diagnostic Bluetooth generic byte for identifer 237. */
  DiagnosticBluetoothGenericByte237Id = "DiagnosticBluetoothGenericByte237Id",
  /** Gets the diagnostic Bluetooth generic byte for identifer 238. */
  DiagnosticBluetoothGenericByte238Id = "DiagnosticBluetoothGenericByte238Id",
  /** Gets the diagnostic Bluetooth generic byte for identifer 239. */
  DiagnosticBluetoothGenericByte239Id = "DiagnosticBluetoothGenericByte239Id",
  /** Gets the diagnostic Bluetooth generic timer for identifer 240. */
  DiagnosticBluetoothGenericTimer240Id = "DiagnosticBluetoothGenericTimer240Id",
  /** Gets the diagnostic Bluetooth generic timer for identifer 241. */
  DiagnosticBluetoothGenericTimer241Id = "DiagnosticBluetoothGenericTimer241Id",
  /** Gets the diagnostic Bluetooth generic timer for identifer 242. */
  DiagnosticBluetoothGenericTimer242Id = "DiagnosticBluetoothGenericTimer242Id",
  /** Gets the diagnostic Bluetooth generic timer for identifer 243. */
  DiagnosticBluetoothGenericTimer243Id = "DiagnosticBluetoothGenericTimer243Id",
  /** Gets the diagnostic Bluetooth generic timer for identifer 244. */
  DiagnosticBluetoothGenericTimer244Id = "DiagnosticBluetoothGenericTimer244Id",
  /** Gets the diagnostic Bluetooth generic timer for identifer 245. */
  DiagnosticBluetoothGenericTimer245Id = "DiagnosticBluetoothGenericTimer245Id",
  /** Gets the diagnostic Bluetooth generic timer for identifer 246. */
  DiagnosticBluetoothGenericTimer246Id = "DiagnosticBluetoothGenericTimer246Id",
  /** Gets the diagnostic Bluetooth generic timer for identifer 247. */
  DiagnosticBluetoothGenericTimer247Id = "DiagnosticBluetoothGenericTimer247Id",
  /** Gets the diagnostic Bluetooth generic timer for identifer 248. */
  DiagnosticBluetoothGenericTimer248Id = "DiagnosticBluetoothGenericTimer248Id",
  /** Gets the diagnostic Bluetooth generic timer for identifer 249. */
  DiagnosticBluetoothGenericTimer249Id = "DiagnosticBluetoothGenericTimer249Id",
  /** Gets the diagnostic Bluetooth generic timer for identifer 255. */
  DiagnosticBluetoothCustomData255Id = "DiagnosticBluetoothCustomData255Id",
  /** Gets the diagnostic accelerometer interrupt failure identifier. */
  DiagnosticAccelerometerInterruptFailureId = "DiagnosticAccelerometerInterruptFailureId",
  /** Gets the diagnostic accident data upload event identifier. */
  DiagnosticAccidentDataUploadEventId = "DiagnosticAccidentDataUploadEventId",
  /** Gets the diagnostic accident level acceleration event identifier. */
  DiagnosticAccidentLevelAccelerationEventId = "DiagnosticAccidentLevelAccelerationEventId",
  /** Gets the diagnostic ac control unit status identifier. */
  DiagnosticAcControlUnitStatusId = "DiagnosticACControlUnitStatusId",
  /** Gets the diagnostic airbag deployed identifier. */
  DiagnosticAirbagDeployedId = "DiagnosticAirbagDeployedId",
  /** Gets the diagnostic airbag nearly deployed identifier. */
  DiagnosticAirbagNearlyDeployedId = "DiagnosticAirbagNearlyDeployedId",
  /** Gets the diagnostic airbag warning light identifier. */
  DiagnosticAirbagWarningLightId = "DiagnosticAirbagWarningLightId",
  /** Gets the diagnostic air conditioner refrigerant pressure identifier. */
  DiagnosticAirConditionerRefrigerantPressureId = "DiagnosticAirConditionerRefrigerantPressureId",
  /** Gets the diagnostic APN re scan started due to connection failure identifier. */
  DiagnosticApnReScanStartedDueToConnectionFailureId = "DiagnosticApnReScanStartedDueToConnectionFailureId",
  /** Gets the diagnostic aux1 identifier. */
  DiagnosticAux1Id = "DiagnosticAux1Id",
  /** Gets the diagnostic aux2 identifier. */
  DiagnosticAux2Id = "DiagnosticAux2Id",
  /** Gets the diagnostic aux3 identifier. */
  DiagnosticAux3Id = "DiagnosticAux3Id",
  /** Gets the diagnostic aux4 identifier. */
  DiagnosticAux4Id = "DiagnosticAux4Id",
  /** Gets the diagnostic aux5 identifier. */
  DiagnosticAux5Id = "DiagnosticAux5Id",
  /** Gets the diagnostic aux6 identifier. */
  DiagnosticAux6Id = "DiagnosticAux6Id",
  /** Gets the diagnostic aux7 identifier. */
  DiagnosticAux7Id = "DiagnosticAux7Id",
  /** Gets the diagnostic aux8 identifier. */
  DiagnosticAux8Id = "DiagnosticAux8Id",
  /** Gets the diagnostic average fuel economy identifier. */
  DiagnosticAverageFuelEconomyId = "DiagnosticAverageFuelEconomyId",
  /** Gets the diagnostic average fuel economy natural gas identifier. */
  DiagnosticAverageFuelEconomynaturalGasId = "DiagnosticAverageFuelEconomynaturalGasId",
  /** Gets the diagnostic battery current identifier. */
  DiagnosticBatteryCurrentId = "DiagnosticBatteryCurrentId",
  /** Gets the diagnostic battery temperature identifier. */
  DiagnosticBatteryTemperatureId = "DiagnosticBatteryTemperatureId",
  /** Gets the diagnostic bootloader update has failed identifier. */
  DiagnosticBootloaderUpdateHasFailedId = "DiagnosticBootloaderUpdateHasFailedId",
  /** Gets the diagnostic brake pedal on identifier. */
  DiagnosticBrakePedalOnId = "DiagnosticBrakePedalOnId",
  /** Gets the diagnostic brake temperature identifier. */
  DiagnosticBrakeTemperatureId = "DiagnosticBrakeTemperatureId",
  /** Gets the diagnostic bus access door identifier. */
  DiagnosticBusAccessDoorId = "DiagnosticBusAccessDoorId",
  /** Gets the diagnostic CAB interior temperature identifier. */
  DiagnosticCabInteriorTemperatureId = "DiagnosticCabInteriorTemperatureId",
  /** Gets the diagnostic CANBUS failed to initialize identifier. */
  DiagnosticCanBusFailedToInitializeId = "DiagnosticCanBusFailedToInitializeId",
  /** Gets the diagnostic can transmit error count exceeded identifier. */
  DiagnosticCanTransmitErrorCountExceededId = "DiagnosticCanTransmitErrorCountExceededId",
  /** Gets the diagnostic change clean exhaust filter warning light identifier. */
  DiagnosticChangeCleanExhaustFilterWarningLightId = "DiagnosticChangeCleanExhaustFilterWarningLightId",
  /** Gets the diagnostic change fuel filter warning light identifier. */
  DiagnosticChangeFuelFilterWarningLightId = "DiagnosticChangeFuelFilterWarningLightId",
  /** Gets the diagnostic charge state identifier. */
  DiagnosticChargeStateId = "DiagnosticChargeStateId",
  /** Gets the diagnostic coolant level identifier. */
  DiagnosticCoolantLevelId = "DiagnosticCoolantLevelId",
  /** Gets the diagnostic cranking voltage identifier. */
  DiagnosticCrankingVoltageId = "DiagnosticCrankingVoltageId",
  /** Gets the diagnostic cruise control active identifier. */
  DiagnosticCruiseControlActiveId = "DiagnosticCruiseControlActiveId",
  /** Gets the diagnostic cruise control enabled identifier. */
  DiagnosticCruiseControlEnabledId = "DiagnosticCruiseControlEnabledId",
  /** Gets the diagnostic dash warning light amber lamp identifier. */
  DiagnosticDashWarningLightAmberLampId = "DiagnosticDashWarningLightAmberLampId",
  /** Gets the diagnostic dash warning light protect lamp identifier. */
  DiagnosticDashWarningLightProtectLampId = "DiagnosticDashWarningLightProtectLampId",
  /** Gets the diagnostic dash warning light red lamp identifier. */
  DiagnosticDashWarningLightRedLampId = "DiagnosticDashWarningLightRedLampId",
  /** Gets the diagnostic device disabled identifier. */
  DiagnosticDeviceDisabledId = "DiagnosticDeviceDisabledId",
  /** Gets the diagnostic device has been unplugged identifier. */
  DiagnosticDeviceHasBeenUnpluggedId = "DiagnosticDeviceHasBeenUnpluggedId",
  /** Gets the diagnostic device logging disabled identifier. */
  DiagnosticDeviceLoggingDisabledId = "DiagnosticDeviceLoggingDisabledId",
  /** Gets the diagnostic device power change identifier. */
  DiagnosticDevicePowerChangeId = "DiagnosticDevicePowerChangeId",
  /** Gets the diagnostic device restarted because all power was removed identifier. */
  DiagnosticDeviceRestartedBecauseAllPowerWasRemovedId = "DiagnosticDeviceRestartedBecauseAllPowerWasRemovedId",
  /** Gets the diagnostic device restarted because of firmware update identifier. */
  DiagnosticDeviceRestartedBecauseOfFirmwareUpdateId = "DiagnosticDeviceRestartedBecauseOfFirmwareUpdateId",
  /** Gets the diagnostic device restarted because of low voltage in power supply identifier. */
  DiagnosticDeviceRestartedBecauseOfLowVoltageInPowerSupplyId = "DiagnosticDeviceRestartedBecauseOfLowVoltageInPowerSupplyId",
  /** Gets the diagnostic device restarted due to internal reset condition identifier. */
  DiagnosticDeviceRestartedDueToInternalResetConditionId = "DiagnosticDeviceRestartedDueToInternalResetConditionId",
  /** Gets the diagnostic device restarted due to internal watchdog condition identifier. */
  DiagnosticDeviceRestartedDueToInternalWatchdogConditionId = "DiagnosticDeviceRestartedDueToInternalWatchdogConditionId",
  /** Gets the diagnostic device total fuel identifier. */
  DiagnosticDeviceTotalFuelId = "DiagnosticDeviceTotalFuelId",
  /** Gets the diagnostic device total idle fuel identifier. */
  DiagnosticDeviceTotalIdleFuelId = "DiagnosticDeviceTotalIdleFuelId",
  /** Gets the electric vehicle battery total driving energy in identifier. Units: kWh */
  DiagnosticElectricEnergyInId = "DiagnosticElectricEnergyInId",
  /** Gets the electric vehicle battery total driving energy out identifier. Units: kWh */
  DiagnosticElectricEnergyOutId = "DiagnosticElectricEnergyOutId",
  /** Gets the diagnostic diesel exhaust fluid identifier. */
  DiagnosticDieselExhaustFluidId = "DiagnosticDieselExhaustFluidId",
  /** Gets the diagnostic diesel particulate filter lamp identifier. */
  DiagnosticDieselParticulateFilterLampId = "DiagnosticDieselParticulateFilterLampId",
  /** Gets the diagnostic driver airbag deployed identifier. */
  DiagnosticDriverAirbagDeployedId = "DiagnosticDriverAirbagDeployedId",
  /** Gets the diagnostic driver audible alert for idle shutdown timer identifier. */
  DiagnosticDriverAudibleAlertForIdleShutdownTimerId = "DiagnosticDriverAudibleAlertForIdleShutdownTimerId",
  /** Gets the diagnostic driver seat belt identifier. */
  DiagnosticDriverSeatbeltId = "DiagnosticDriverSeatbeltId",
  /** Gets the diagnostic engine check fuel filler cap warning light identifier. */
  DiagnosticEngineCheckFuelFillerCapWarningLightId = "DiagnosticEngineCheckFuelFillerCapWarningLightId",
  /** Gets the diagnostic engine coolant temperature identifier. */
  DiagnosticEngineCoolantTemperatureId = "DiagnosticEngineCoolantTemperatureId",
  /** Gets the diagnostic engine cooling fan speed identifier. */
  DiagnosticEngineCoolingFanSpeedId = "DiagnosticEngineCoolingFanSpeedId",
  /** Gets the diagnostic engine hot warning light identifier. */
  DiagnosticEngineHotWarningLightId = "DiagnosticEngineHotWarningLightId",
  /** Gets the diagnostic engine hours adjustment identifier. */
  DiagnosticEngineHoursAdjustmentId = "DiagnosticEngineHoursAdjustmentId",
  /** Gets the diagnostic engine hours identifier. */
  DiagnosticEngineHoursId = "DiagnosticEngineHoursId",
  /** Gets the diagnostic third party (custom device) engine hours identifier. */
  DiagnosticThirdPartyEngineRunTimeId = "DiagnosticThirdPartyEngineRunTimeId",
  /** Gets the diagnostic third party (custom device) device power change value. */
  DiagnosticThirdPartyDevicePowerChangeId = "DiagnosticThirdPartyDevicePowerChangeId",
  /** Gets the diagnostic third party (custom device) log data buffer overrun value. */
  DiagnosticLogDataBufferOverrunId = "DiagnosticThirdPartyBufferOverrunId",
  /** Gets the diagnostic engine data active identifier. */
  DiagnosticEngineDataActiveId = "DiagnosticEngineDataActiveId",
  /** Gets the diagnostic log third party data buffer overrun value. */
  DiagnosticThirdPartyLogDataBufferOverrunId = "DiagnosticThirdPartyLogDataBufferOverrunId",
  /** Gets the diagnostic third party (custom device) engine data active value. */
  DiagnosticThirdPartyEngineDataActiveId = "DiagnosticThirdPartyEngineDataActiveId",
  /** Gets the diagnostic engine oil level identifier. */
  DiagnosticEngineOilLevelId = "DiagnosticEngineOilLevelId",
  /** Gets the diagnostic engine oil life remaining identifier. */
  DiagnosticEngineOilLifeRemainingId = "DiagnosticEngineOilLifeRemainingId",
  /** Gets the diagnostic engine oil starvation indicator on identifier. */
  DiagnosticEngineOilStarvationIndicatorOnId = "DiagnosticEngineOilStarvationIndicatorOnId",
  /** Gets the diagnostic engine oil temperature identifier. */
  DiagnosticEngineOilTemperatureId = "DiagnosticEngineOilTemperatureID",
  /** Gets the diagnostic engine on time identifier. */
  DiagnosticEngineOnTimeId = "DiagnosticEngineOnTimeId",
  /** Gets the diagnostic engine operating in reduced power mode warning light identifier. */
  DiagnosticEngineOperatingInReducedPowerModeWarningLightId = "DiagnosticEngineOperatingInReducedPowerModeWarningLightId",
  /** Gets the diagnostic engine running due to vehicle remote starter identifier. */
  DiagnosticEngineRunningDueToVehicleRemoteStarterId = "DiagnosticEngineRunningDueToVehicleRemoteStarterId",
  /** Gets the diagnostic engine shutdown by idle timer identifier. */
  DiagnosticEngineShutdownByIdleTimerId = "DiagnosticEngineShutdownByIdleTimerId",
  /** Gets the diagnostic engine speed identifier. */
  DiagnosticEngineSpeedId = "DiagnosticEngineSpeedId",
  /** Gets the diagnostic engine road speed identifier. */
  DiagnosticEngineRoadSpeedId = "DiagnosticEngineRoadSpeedId",
  /** Gets the diagnostic engine road speed identifier. */
  DiagnosticThirdPartyEngineRoadSpeedId = "DiagnosticThirdPartyEngineRoadSpeedId",
  /** Gets the diagnostic engine starting disabled warning light identifier. */
  DiagnosticEngineStartingDisabledWarningLightId = "DiagnosticEngineStartingDisabledWarningLightId",
  /** Gets the diagnostic engine transmission oil temperature identifier. */
  DiagnosticEngineTransmissionOilTemperatureId = "DiagnosticEngineTransmissionOilTemperatureId",
  /** Gets the diagnostic engine warning light identifier. */
  DiagnosticEngineWarningLightId = "DiagnosticEngineWarningLightId",
  /** Gets the diagnostic excessive accelerometer events identifier. */
  DiagnosticExcessiveAccelerometerEventsId = "DiagnosticExcessiveAccelerometerEventsId",
  /** Gets the diagnostic excessive accelerometer events over accident threshold identifier. */
  DiagnosticExcessiveAccelerometerEventsOverAccidentThresholdId = "DiagnosticExcessiveAccelerometerEventsOverAccidentThresholdId",
  /** Gets the diagnostic excessive accelerometer logs in a single event identifier. */
  DiagnosticExcessiveAccelerometerLogsInASingleEventId = "DiagnosticExcessiveAccelerometerLogsInASingleEventId",
  /** Gets the diagnostic disabled excessive accelerometer data identifier. */
  DiagnosticDisabledExcessiveAccelerometerDataId = "DiagnosticDisabledExcessiveAccelerometerDataId",
  /** Gets the diagnostic auxiliary module failure identifier. */
  DiagnosticAuxiliaryModuleFailureId = "DiagnosticAuxiliaryModuleFailureId",
  /** Gets the diagnostic CAN mode initialization failure identifier. */
  DiagnosticCanModeInitializationFailureId = "DiagnosticCanModeInitializationFailureId",
  /** Gets the diagnostic CANBUS disabled identifier. */
  DiagnosticCanBusDisabledId = "DiagnosticCanBusDisabledId",
  /** Gets the diagnostic CANBUS oscillating active passive identifier. */
  DiagnosticCanBusOscillatingActivePassiveId = "DiagnosticCanBusOscillatingActivePassiveId",
  /** Gets the diagnostic CANBUS excessive listen identifier. */
  DiagnosticCanBusExcessiveListenId = "DiagnosticCanBusExcessiveListenId",
  /** Gets the diagnostic intermittent connection communications identifier. */
  DiagnosticIntermittentConnectionCommunicationsId = "DiagnosticIntermittentConnectionCommunicationsId",
  /** Gets the diagnostic truck solid material total. */
  DiagnosticTruckSolidMaterialTotalId = "DiagnosticTruckSolidMaterialTotalId",
  /** Gets the diagnostic solid material type. */
  DiagnosticSolidMaterialTypeId = "DiagnosticSolidMaterialTypeId",
  /** Gets the diagnostic truck pre wet material total. */
  DiagnosticTruckPreWetMaterialTotalId = "DiagnosticTruckPreWetMaterialTotalId",
  /** Gets the diagnostic pre wet material type. */
  DiagnosticPreWetMaterialTypeId = "DiagnosticPreWetMaterialTypeId",
  /** Gets the diagnostic truck liquid material total. */
  DiagnosticTruckLiquidMaterialTotalId = "DiagnosticTruckLiquidMaterialTotalId",
  /** Gets the diagnostic liquid material type. */
  DiagnosticLiquidMaterialTypeId = "DiagnosticLiquidMaterialTypeId",
  /** Gets the diagnostic solid material active. */
  DiagnosticSolidMaterialActiveId = "DiagnosticSolidMaterialActiveId",
  /** Gets the diagnostic winter operation controller status. */
  DiagnosticControllerStatusId = "DiagnosticControllerStatusId",
  /** Gets the diagnostic solid material rate. */
  DiagnosticSolidMaterialRateId = "DiagnosticSolidMaterialRateId",
  /** Gets the diagnostic pre wet material rate. */
  DiagnosticPreWetMaterialRateId = "DiagnosticPreWetMaterialRateId",
  /** Gets the diagnostic liquid material rate. */
  DiagnosticLiquidMaterialRateId = "DiagnosticLiquidMaterialRateId",
  /** Gets the diagnostic Battery Level. */
  DiagnosticBatteryLevelId = "DiagnosticBatteryLevelId",
  /** Gets the diagnostic Battery voltage. */
  DiagnosticBatteryVoltageId = "DiagnosticBatteryVoltageId",
  /** Gets the diagnostic Third Party Aux 1 */
  DiagnosticThirdPartyAux1Id = "DiagnosticThirdPartyAux1Id",
  /** Gets the diagnostic Third Party Aux 2 */
  DiagnosticThirdPartyAux2Id = "DiagnosticThirdPartyAux2Id",
  /** Gets the diagnostic hird Party Aux 3 */
  DiagnosticThirdPartyAux3Id = "DiagnosticThirdPartyAux3Id",
  /** Gets the diagnostic hird Party Aux 3 */
  DiagnosticThirdPartyAux4Id = "DiagnosticThirdPartyAux4Id",
  /** Gets the diagnostic analog input temperature 1. */
  DiagnosticAnalogInputTemp1Id = "DiagnosticAnalogInputTemp1Id",
  /** Gets the diagnostic analog input temperature 2. */
  DiagnosticAnalogInputTemp2Id = "DiagnosticAnalogInputTemp2Id",
  /** Gets the diagnostic analog input temperature 3. */
  DiagnosticAnalogInputTemp3Id = "DiagnosticAnalogInputTemp3Id",
  /** Gets the diagnostic analog input pressure 1. */
  DiagnosticAnalogInputPressure1Id = "DiagnosticAnalogInputPressure1Id",
  /** Gets the diagnostic analog input pressure 2. */
  DiagnosticAnalogInputPressure2Id = "DiagnosticAnalogInputPressure2Id",
  /** Gets the diagnostic device battery voltage. */
  DiagnosticDeviceBatteryVoltageId = "DiagnosticDeviceBatteryVoltageId",
  /** Gets the diagnostic device cellular RSSI. */
  DiagnosticCellularRssiId = "DiagnosticCellularRssiId",
  /** Gets the diagnostic device solar panel current */
  DiagnosticDeviceSolarPanelCurrentId = "DiagnosticDeviceSolarPanelCurrentId",
  /** Gets the diagnostic horizontal DOP */
  DiagnosticHorizontalDopId = "DiagnosticHorizontalDopId",
  /** Gets the diagnostic CANBUS short identifier. */
  DiagnosticCanBusShortId = "DiagnosticCanBusShortId",
  /** Gets the diagnostic device oscillator issue identifier. */
  DiagnosticDeviceOscillatorIssueId = "DiagnosticDeviceOscillatorIssueId",
  /** Gets the diagnostic electrical system rating identifier. */
  DiagnosticElectricalSystemRatingId = "DiagnosticElectricalSystemRatingId",
  /** Gets the diagnostic excessive logging detected identifier. */
  DiagnosticExcessiveLoggingDetectedId = "DiagnosticExcessiveLoggingDetectedId",
  /** Gets the diagnostic exhaust differential pressure identifier. */
  DiagnosticExhaustDifferentialPressureId = "DiagnosticExhaustDifferentialPressureId",
  /** Gets the diagnostic first row middle seat belt identifier. */
  DiagnosticFirstRowMiddleSeatbeltId = "DiagnosticFirstRowMiddleSeatbeltId",
  /** Gets the diagnostic flash error count identifier. */
  DiagnosticFlashErrorCountId = "DiagnosticFlashErrorCountId",
  /** Gets the diagnostic flashing amber light identifier. */
  DiagnosticFlashingAmberLightId = "DiagnosticFlashingAmberLightId",
  /** Gets the diagnostic flashing red light identifier. */
  DiagnosticFlashingRedLightId = "DiagnosticFlashingRedLightId",
  /** Gets the diagnostic flash memory failure identifier. */
  DiagnosticFlashMemoryFailureId = "DiagnosticFlashMemoryFailureId",
  /** Gets the diagnostic Ford ISO protocol detected identifier. */
  DiagnosticFordIsoProtocolDetectedId = "DiagnosticFordIsoProtocolDetectedId",
  /** Gets the diagnostic frontal impact pretensioner severity achieved identifier. */
  DiagnosticFrontalImpactPretensionerSeverityAchievedId = "DiagnosticFrontalImpactPretensionerSeverityAchievedId",
  /** Gets the diagnostic frontal impact stage1 severity achieved identifier. */
  DiagnosticFrontalImpactStage1SeverityAchievedId = "DiagnosticFrontalImpactStage1SeverityAchievedId",
  /** Gets the diagnostic frontal impact stage2 severity achieved identifier. */
  DiagnosticFrontalImpactStage2SeverityAchievedId = "DiagnosticFrontalImpactStage2SeverityAchievedId",
  /** Gets the diagnostic fuel alcohol composition identifier. */
  DiagnosticFuelAlcoholCompositionId = "DiagnosticFuelAlcoholCompositionId",
  /** Gets the diagnostic fuel filter life remaining identifier. */
  DiagnosticFuelFilterLifeRemainingId = "DiagnosticFuelFilterLifeRemainingId",
  /** Gets the diagnostic fuel level identifier. */
  DiagnosticFuelLevelId = "DiagnosticFuelLevelId",
  /** Gets the diagnostic fuel tank capacity identifier. */
  DiagnosticFuelTankCapacityId = "DiagnosticFuelTankCapacityId",
  /** Gets the diagnostic fuel units identifier. */
  DiagnosticFuelUnitsId = "DiagnosticFuelUnitsId",
  /** Gets the diagnostic fuel type for Gasoline */
  DiagnosticFuelTypeGasId = "DiagnosticFuelTypeGasId",
  /** Gets the diagnostic fuel type for Diesel */
  DiagnosticFuelTypeDieselId = "DiagnosticFuelTypeDieselId",
  /** Gets the diagnostic fuel type for Methanol */
  DiagnosticFuelTypeMethanolId = "DiagnosticFuelTypeMethanolId",
  /** Gets the diagnostic fuel type for Ethanol */
  DiagnosticFuelTypeEthanolId = "DiagnosticFuelTypeEthanolId",
  /** Gets the diagnostic fuel type for Liquified Petroleum Gas */
  DiagnosticFuelTypeLiquifiedPetroleumGasId = "DiagnosticFuelTypeLiquifiedPetroleumGasId",
  /** Gets the diagnostic fuel type for Compressed Natural Gas */
  DiagnosticFuelTypeCompressedNaturalGasId = "DiagnosticFuelTypeCompressedNaturalGasId",
  /** Gets the diagnostic fuel type for Propane */
  DiagnosticFuelTypePropaneId = "DiagnosticFuelTypePropaneId",
  /** Gets the diagnostic fuel type for Electric */
  DiagnosticFuelTypeElectricId = "DiagnosticFuelTypeElectricId",
  /** Gets the diagnostic gear position identifier. */
  DiagnosticGearPositionId = "DiagnosticGearPositionId",
  /** Gets the diagnostic general vehicle warning light identifier. */
  DiagnosticGeneralVehicleWarningLightId = "DiagnosticGeneralVehicleWarningLightId",
  /** Gets the diagnostic Geotab driver key read error identifier. */
  DiagnosticGeotabDriverKeyReadErrorId = "DiagnosticGeotabDriverKeyReadErrorId",
  /** Gets the diagnostic GMLAN high speed engine protocol detected identifier. */
  DiagnosticGmlanHighspeedEngineProtocolDetectedId = "DiagnosticGmlanHighspeedEngineProtocolDetectedId",
  /** Gets the diagnostic GMLAN low speed engine protocol detected identifier. */
  DiagnosticGmlanLowspeedEngineProtocolDetectedId = "DiagnosticGmlanLowspeedEngineProtocolDetectedId",
  /** Gets the diagnostic GM SWC low speed protocol detected identifier. */
  DiagnosticGmSwcLowSpeedProtocolDetectedId = "DiagnosticGmSwcLowSpeedProtocolDetectedId",
  /** Gets the diagnostic GO device voltage identifier. */
  DiagnosticGoDeviceVoltageId = "DiagnosticGoDeviceVoltageId",
  /** Gets the diagnostic GPS antenna short circuit identifier. */
  DiagnosticGpsAntennaShortCircuitId = "DiagnosticGpsAntennaShortCircuitId",
  /** Gets the diagnostic GPS antenna unplugged identifier. */
  DiagnosticGpsAntennaUnpluggedId = "DiagnosticGpsAntennaUnpluggedId",
  /** Gets the diagnostic GPS configuration retry identifier. */
  DiagnosticGpsConfigurationRetryId = "DiagnosticGpsConfigurationRetryId",
  /** Gets the diagnostic GPS log reason. */
  DiagnosticGpsLogReasonId = "DiagnosticGpsLogReasonId",
  /** Gets the diagnostic GPS not responding identifier. */
  DiagnosticGpsNotRespondingId = "DiagnosticGpsNotRespondingId",
  /** Gets the diagnostic hard corner identifier. */
  DiagnosticHardCornerId = "DiagnosticHardCornerId",
  /** Gets the diagnostic harness detected6 pin identifier. */
  DiagnosticHarnessDetected6PinId = "DiagnosticHarnessDetected6PinId",
  /** Gets the diagnostic harness detected9 pin identifier. */
  DiagnosticHarnessDetected9PinId = "DiagnosticHarnessDetected9PinId",
  /** Gets the diagnostic harsh acceleration identifier. */
  DiagnosticHarshAccelerationId = "DiagnosticHarshAccelerationId",
  /** Gets the diagnostic harsh brake identifier. */
  DiagnosticHarshBrakeId = "DiagnosticHarshBrakeId",
  /** Gets the diagnostic high voltage while ignition off identifier. */
  DiagnosticHighVoltageWhileIgnitionOffId = "DiagnosticHighVoltageWhileIgnitionOffId",
  /** Gets the diagnostic Honda IDO engine protocol detected identifier. */
  DiagnosticHondaIsoEngineProtocolDetectedId = "DiagnosticHondaIsoEngineProtocolDetectedId",
  /** Gets the diagnostic hybrid engine status identifier. */
  DiagnosticHybridEngineStatusId = "DiagnosticHybridEngineStatusId",
  /** Gets the diagnostic hybrid vehicle detected identifier. */
  DiagnosticHybridVehicleDetectedId = "DiagnosticHybridVehicleDetectedId",
  /** Gets the diagnostic idle shutdown timer active identifier. */
  DiagnosticIdleShutdownTimerActiveId = "DiagnosticIdleShutdownTimerActiveId",
  /** Gets the diagnostic idle shutdown timer enabled identifier. */
  DiagnosticIdleShutdownTimerEnabledId = "DiagnosticIdleShutdownTimerEnabledId",
  /** Gets the diagnostic idle shutdown timer override identifier. */
  DiagnosticIdleShutdownTimerOverrideId = "DiagnosticIdleShutdownTimerOverrideId",
  /** Gets the diagnostic ignition identifier. */
  DiagnosticIgnitionId = "DiagnosticIgnitionId",
  /** Gets the diagnostic instantaneous fuel economy identifier. */
  DiagnosticInstantaneousFuelEconomyId = "DiagnosticInstantaneousFuelEconomyId",
  /** Gets the diagnostic instantaneous fuel rate identifier. */
  DiagnosticInstantaneousFuelRateId = "DiagnosticInstantaneousFuelRateId",
  /** Gets the diagnostic internal clock stopped identifier. */
  DiagnosticInternalClockStoppedId = "DiagnosticInternalClockStoppedId",
  /** Gets the diagnostic invalid device type detected identifier. */
  DiagnosticInvalidDeviceTypeDetectedId = "DiagnosticInvalidDeviceTypeDetectedId",
  /** Gets the diagnostic invalid driver identifier. */
  DiagnosticInvalidDriverIdId = "DiagnosticInvalidDriverIdId",
  /** Gets the diagnostic invalid GPS messages received identifier. */
  DiagnosticInvalidGpsMessagesReceivedId = "DiagnosticInvalidGpsMessagesReceivedId",
  /** Gets the diagnostic invalid opcode reset identifier. */
  DiagnosticInvalidOpcodeResetId = "DiagnosticInvalidOpcodeResetId",
  /** Gets the diagnostic Iridium accelerometer event identifier. */
  DiagnosticIridiumAccelerometerEventId = "DiagnosticIridiumAccelerometerEventId",
  /** Gets the diagnostic Iridium low voltage identifier. */
  DiagnosticIridiumLowVoltageId = "DiagnosticIridiumLowVoltageId",
  /** Gets the diagnostic ISO14230 legacy engine protocol detected identifier. */
  DiagnosticIso14230LegacyEngineProtocolDetectedId = "DiagnosticIso14230LegacyEngineProtocolDetectedId",
  /** Gets the diagnostic ISO9141 legacy engine protocol detected identifier. */
  DiagnosticIso9141LegacyEngineProtocolDetectedId = "DiagnosticIso9141LegacyEngineProtocolDetectedId",
  /** Gets the diagnostic J1708 ALDL harness detected identifier. */
  DiagnosticJ1708AldlHarnessDetectedId = "DiagnosticJ1708AldlHarnessDetectedId",
  /** Gets the diagnostic J1708 engine hours identifier. */
  DiagnosticJ1708EngineHoursId = "DiagnosticJ1708EngineHoursId",
  /** Gets the diagnostic J1708 engine protocol detected identifier. */
  DiagnosticJ1708EngineProtocolDetectedId = "DiagnosticJ1708EngineProtocolDetectedId",
  /** Gets the diagnostic J1708 total vehicle distance identifier. */
  DiagnosticJ1708TotalVehicleDistanceId = "DiagnosticJ1708TotalVehicleDistanceId",
  /** Gets the diagnostic J1850 PWM legacy engine protocol detected identifier. */
  DiagnosticJ1850PwmLegacyEngineProtocolDetectedId = "DiagnosticJ1850PwmLegacyEngineProtocolDetectedId",
  /** Gets the diagnostic J1850 VPW legacy engine protocol detected identifier. */
  DiagnosticJ1850VpwLegacyEngineProtocolDetectedId = "DiagnosticJ1850VpwLegacyEngineProtocolDetectedId",
  /** Gets the diagnostic J1939 CAN engine protocol detected identifier. */
  DiagnosticJ1939CanEngineProtocolDetectedId = "DiagnosticJ1939CanEngineProtocolDetectedId",
  /** Gets the diagnostic J1939 engine hours identifier. */
  DiagnosticJ1939EngineHoursId = "DiagnosticJ1939EngineHoursId",
  /** Gets the diagnostic J1939 total vehicle distance identifier. */
  DiagnosticJ1939TotalVehicleDistanceId = "DiagnosticJ1939TotalVehicleDistanceId",
  /** Gets the diagnostic left side airbag deployed identifier. */
  DiagnosticLeftSideAirbagDeployedId = "DiagnosticLeftSideAirbagDeployedId",
  /** Gets the diagnostic left side severity achieved identifier. */
  DiagnosticLeftSideSeverityAchievedId = "DiagnosticLeftSideSeverityAchievedId",
  /** Gets the diagnostic left turn signal identifier. */
  DiagnosticLeftTurnSignalId = "DiagnosticLeftTurnSignalId",
  /** Gets the diagnostic low priority warning light identifier. */
  DiagnosticLowPriorityWarningLightId = "DiagnosticLowPriorityWarningLightId",
  /** Gets the diagnostic memory allocation error identifier. */
  DiagnosticMemoryAllocationErrorId = "DiagnosticMemoryAllocationErrorId",
  /** Gets the diagnostic memory pointer error identifier. */
  DiagnosticMemoryPointerErrorId = "DiagnosticMemoryPointerErrorId",
  /** Gets the diagnostic OBDCAN 11 Bit 250 K engine protocol detected identifier. */
  DiagnosticObdcan11Bit250KEngineProtocolDetectedId = "DiagnosticOBDCAN11Bit250KEngineProtocolDetectedId",
  /** Gets the diagnostic OBDCAN 11 Bit 500 K engine protocol detected identifier. */
  DiagnosticObdcan11Bit500KEngineProtocolDetectedId = "DiagnosticOBDCAN11Bit500KEngineProtocolDetectedId",
  /** Gets the diagnostic OBDCAN 29 Bit 250 K engine protocol detected identifier. */
  DiagnosticObdcan29Bit250KEngineProtocolDetectedId = "DiagnosticOBDCAN29Bit250KEngineProtocolDetectedId",
  /** Gets the diagnostic OBDCAN 29 Bit 500 K engine protocol detected identifier. */
  DiagnosticObdcan29Bit500KEngineProtocolDetectedId = "DiagnosticOBDCAN29Bit500KEngineProtocolDetectedId",
  /** Gets the diagnostic OBD odometer reader identifier. */
  DiagnosticObdOdometerReaderId = "DiagnosticOBDOdometerReaderId",
  /** Gets the diagnostic OBD port alert status identifier. */
  DiagnosticObdPortAlertStatusId = "DiagnosticObdPortAlertStatusId",
  /** Gets the diagnostic odometer adjustment identifier. */
  DiagnosticOdometerAdjustmentId = "DiagnosticOdometerAdjustmentId",
  /** Gets the diagnostic raw odometer identifier. */
  DiagnosticRawOdometerId = "DiagnosticRawOdometerId",
  /** Gets the diagnostic odometer identifier. */
  DiagnosticOdometerId = "DiagnosticOdometerId",
  /** Gets the third party (custom device) diagnostic odometer identifier. */
  DiagnosticThirdPartyOdometerId = "DiagnosticThirdPartyOdometerId",
  /** Gets the diagnostic oil change due warning light identifier. */
  DiagnosticOilChangeDueWarningLightId = "DiagnosticOilChangeDueWarningLightId",
  /** Gets the diagnostic oil level low warning light identifier. */
  DiagnosticOilLevelLowWarningLightId = "DiagnosticOilLevelLowWarningLightId",
  /** Gets the diagnostic oil light on identifier. */
  DiagnosticOilLightOnId = "DiagnosticOilLightOnId",
  /** Gets the diagnostic oil pressure identifier. */
  DiagnosticOilPressureId = "DiagnosticOilPressureId",
  /** Gets the diagnostic outside temperature identifier. */
  DiagnosticOutsideTemperatureId = "DiagnosticOutsideTemperatureId",
  /** Gets the diagnostic panic identifier. */
  DiagnosticPanicId = "DiagnosticPanicId",
  /** Gets the diagnostic possible collision detected identifier. */
  DiagnosticPossibleCollisionDetectedId = "DiagnosticPossibleCollisionDetectedId",
  /** Gets the diagnostic potential bad install identifier. */
  DiagnosticPotentialBadInstallId = "DiagnosticPotentialBadInstallId",
  /** Gets the diagnostic panic identifier. */
  DiagnosticSystemAlertId = "DiagnosticSystemAlertId",
  /** Gets the diagnostic parking brake identifier. */
  DiagnosticParkingBrakeId = "DiagnosticParkingBrakeId",
  /** Gets the diagnostic passenger airbag deployed identifier. */
  DiagnosticPassengerAirbagDeployedId = "DiagnosticPassengerAirbagDeployedId",
  /** Gets the diagnostic passenger occupancy identifier. */
  DiagnosticPassengerOccupancyId = "DiagnosticPassengerOccupancyId",
  /** Gets the diagnostic passenger seat belt violation identifier. */
  DiagnosticPassengerSeatbeltViolationId = "DiagnosticPassengerSeatbeltViolationId",
  /** Gets the diagnostic position valid identifier. */
  DiagnosticPositionValidId = "DiagnosticPositionValidId",
  /** Gets the diagnostic position valid identifier from device. */
  DiagnosticPositionValidAtDeviceId = "DiagnosticPositionValidAtDeviceId",
  /** Gets the diagnostic power takeoff engaged identifier. */
  DiagnosticPowerTakeoffEngagedId = "DiagnosticPowerTakeoffEngagedId",
  /** Gets the diagnostic power takeoff total fuel used identifier. */
  DiagnosticPowerTakeoffTotalFuelUsedId = "DiagnosticPowerTakeoffTotalFuelUsedId",
  /** Gets the diagnostic PTO enabled identifier. */
  DiagnosticPtoEnabledId = "DiagnosticPTOEnabledId",
  /** Gets the diagnostic rear impact severity achieved identifier. */
  DiagnosticRearImpactSeverityAchievedId = "DiagnosticRearImpactSeverityAchievedId",
  /** Gets the diagnostic restarted the modem manager state machine identifier. */
  DiagnosticRestartedTheModemManagerStateMachineId = "DiagnosticRestartedTheModemManagerStateMachineId",
  /** Gets the diagnostic restarted the modem state machine identifier. */
  DiagnosticRestartedTheModemStateMachineId = "DiagnosticRestartedTheModemStateMachineId",
  /** Gets the diagnostic wifi hotspot data usage identifier. */
  DiagnosticWiFiHotspotDataUsageId = "DiagnosticWiFiHotspotDataUsageId",
  /** Gets the diagnostic generic Adblue tank level. */
  DiagnosticGenericAdblueTankLevelId = "DiagnosticGenericAdblueTankLevelId",
  /** Gets the ID of the diagnostic for EV Powertrain Type (Code 9, Source Ai Model). */
  DiagnosticEvPowertrainTypeId = "DiagnosticEvPowertrainTypeId",
  /** Gets the diagnostic restarted the radio manager state machine identifier. */
  DiagnosticRestartedTheRadioManagerStateMachineId = "DiagnosticRestartedTheRadioManagerStateMachineId",
  /** Gets the diagnostic restarted the radio state machine identifier. */
  DiagnosticRestartedTheRadioStateMachineId = "DiagnosticRestartedTheRadioStateMachineId",
  /** Gets the diagnostic restarted the WIFI manager state machine identifier. */
  DiagnosticRestartedTheWifiManagerStateMachineId = "DiagnosticRestartedTheWifiManagerStateMachineId",
  /** Gets the diagnostic restarted the WIFI state machine identifier. */
  DiagnosticRestartedTheWifiStateMachineId = "DiagnosticRestartedTheWifiStateMachineId",
  /** Gets the diagnostic RF module failure identifier. */
  DiagnosticRfModuleFailureId = "DiagnosticRfModuleFailureId",
  /** Gets the diagnostic RF module mac address error identifier. */
  DiagnosticRfModuleMacAddressErrorId = "DiagnosticRfModuleMacAddressErrorId",
  /** Gets the diagnostic right side airbag deployed identifier. */
  DiagnosticRightSideAirbagDeployedId = "DiagnosticRightSideAirbagDeployedId",
  /** Gets the diagnostic right side severity achieved identifier. */
  DiagnosticRightSideSeverityAchievedId = "DiagnosticRightSideSeverityAchievedId",
  /** Gets the diagnostic right turn signal identifier. */
  DiagnosticRightTurnSignalId = "DiagnosticRightTurnSignalId",
  /** Gets the diagnostic rollover severity achieved identifier. */
  DiagnosticRolloverSeverityAchievedId = "DiagnosticRolloverSeverityAchievedId",
  /** Gets the diagnostic secondary can bus failed to initialize identifier. */
  DiagnosticSecondaryCanBusFailedToInitializeId = "DiagnosticSecondaryCanBusFailedToInitializeId",
  /** Gets the diagnostic second row left seat belt identifier. */
  DiagnosticSecondRowLeftSeatbeltId = "DiagnosticSecondRowLeftSeatbeltId",
  /** Gets the diagnostic second row middle seat belt identifier. */
  DiagnosticSecondRowMiddleSeatbeltId = "DiagnosticSecondRowMiddleSeatbeltId",
  /** Gets the diagnostic second row right seat belt identifier. */
  DiagnosticSecondRowRightSeatbeltId = "DiagnosticSecondRowRightSeatbeltId",
  /** Gets the diagnostic slave processor failure identifier. */
  DiagnosticSlaveProcessorFailureId = "DiagnosticSlaveProcessorFailureId",
  /** Gets the diagnostic standard harness detected identifier. */
  DiagnosticStandardHarnessDetectedId = "DiagnosticStandardHarnessDetectedId",
  /** Gets the diagnostic third row left seat belt identifier. */
  DiagnosticThirdRowLeftSeatbeltId = "DiagnosticThirdRowLeftSeatbeltId",
  /** Gets the diagnostic third row middle seat belt identifier. */
  DiagnosticThirdRowMiddleSeatbeltId = "DiagnosticThirdRowMiddleSeatbeltId",
  /** Gets the diagnostic third row right seat belt identifier. */
  DiagnosticThirdRowRightSeatbeltId = "DiagnosticThirdRowRightSeatbeltId",
  /** Gets the diagnostic tire pressure front left identifier. */
  DiagnosticTirePressureFrontLeftId = "DiagnosticTirePressureFrontLeftId",
  /** Gets the diagnostic tire pressure front right identifier. */
  DiagnosticTirePressureFrontRightId = "DiagnosticTirePressureFrontRightId",
  /** Gets the diagnostic tire pressure rear left identifier. */
  DiagnosticTirePressureRearLeftId = "DiagnosticTirePressureRearLeftId",
  /** Gets the diagnostic tire pressure rear right identifier. */
  DiagnosticTirePressureRearRightId = "DiagnosticTirePressureRearRightId",
  /** Gets the diagnostic tire pressure spare identifier. */
  DiagnosticTirePressureSpareId = "DiagnosticTirePressureSpareId",
  /** Gets the diagnostic tire warning light identifier. */
  DiagnosticTireWarningLightId = "DiagnosticTireWarningLightId",
  /** Gets the diagnostic too many engine records identifier. */
  DiagnosticTooManyEngineRecordsId = "DiagnosticTooManyEngineRecordsId",
  /** Gets the diagnostic too many logs in multilog identifier. */
  DiagnosticTooManyLogsInMultilogId = "DiagnosticTooManyLogsInMultilogId",
  /** Gets the diagnostic total air used identifier. */
  DiagnosticTotalAirUsedId = "DiagnosticTotalAirUsedId",
  /** Gets the diagnostic total fuel used identifier. */
  DiagnosticTotalFuelUsedId = "DiagnosticTotalFuelUsedId",
  /** Gets the diagnostic total idle air used identifier. */
  DiagnosticTotalIdleAirUsedId = "DiagnosticTotalIdleAirUsedId",
  /** Gets the diagnostic total idle fuel used identifier. */
  DiagnosticTotalIdleFuelUsedId = "DiagnosticTotalIdleFuelUsedId",
  /** Gets the diagnostic total idle hours identifier. */
  DiagnosticTotalIdleHoursId = "DiagnosticTotalIdleHoursId",
  /** Gets the diagnostic total PTO hours identifier. */
  DiagnosticTotalPtoHoursId = "DiagnosticTotalPTOHoursId",
  /** Gets the diagnostic total trip fuel used identifier. */
  DiagnosticTotalTripFuelUsedId = "DiagnosticTotalTripFuelUsedId",
  /** Gets the diagnostic total trip idle fuel used identifier. */
  DiagnosticTotalTripIdleFuelUsedId = "DiagnosticTotalTripIdleFuelUsedId",
  /** Gets the diagnostic Toyota ISO engine protocol detected identifier. */
  DiagnosticToyotaIsoEngineProtocolDetectedId = "DiagnosticToyotaIsoEngineProtocolDetectedId",
  /** Gets the diagnostic traction control system active identifier. */
  DiagnosticTractionControlSystemActiveId = "DiagnosticTractionControlSystemActiveId",
  /** Gets the diagnostic traction control system enabled identifier. */
  DiagnosticTractionControlSystemEnabledId = "DiagnosticTractionControlSystemEnabledId",
  /** Gets the diagnostic transmission oil change warning light identifier. */
  DiagnosticTransmissionOilChangeWarningLightId = "DiagnosticTransmissionOilChangeWarningLightId",
  /** Gets the diagnostic transmission oil level identifier. */
  DiagnosticTransmissionOilLevelId = "DiagnosticTransmissionOilLevelId",
  /** Gets the diagnostic trip distance identifier. */
  DiagnosticTripDistanceId = "DiagnosticTripDistanceId",
  /** Gets the diagnostic undefined engine protocol detected identifier. */
  DiagnosticUndefinedEngineProtocolDetectedId = "DiagnosticUndefinedEngineProtocolDetectedId",
  /** Gets the diagnostic vehicle ABS system failed identifier. */
  DiagnosticVehicleAbsSystemFailedId = "DiagnosticVehicleAbsSystemFailedId",
  /** Gets the diagnostic vehicle AWD system failed identifier. */
  DiagnosticVehicleAwdSystemFailedId = "DiagnosticVehicleAwdSystemFailedId",
  /** Gets the diagnostic vehicle battery low voltage identifier. */
  DiagnosticVehicleBatteryLowVoltageId = "DiagnosticVehicleBatteryLowVoltageId",
  /** Gets the diagnostic vehicle programmed cruise high speed limit identifier. */
  DiagnosticVehicleProgrammedCruiseHighSpeedLimitId = "DiagnosticVehicleProgrammedCruiseHighSpeedLimitId",
  /** Gets the diagnostic vehicle programmed maximum road speed limit enabled identifier. */
  DiagnosticVehicleProgrammedMaximumRoadspeedLimitEnabledId = "DiagnosticVehicleProgrammedMaximumRoadspeedLimitEnabledId",
  /** Gets the diagnostic vehicle programmed maximum road speed limit identifier. */
  DiagnosticVehicleProgrammedMaximumRoadspeedLimitId = "DiagnosticVehicleProgrammedMaximumRoadspeedLimitId",
  /** Gets the diagnostic VIN request failure identifier. */
  DiagnosticVinRequestFailureId = "DiagnosticVinRequestFailureId",
  /** Gets the diagnostic washer fluid level identifier. */
  DiagnosticWasherFluidLevelId = "DiagnosticWasherFluidLevelId",
  /** Gets the diagnostic water detected in fuel warning light identifier. */
  DiagnosticWaterDetectedInFuelWarningLightId = "DiagnosticWaterDetectedInFuelWarningLightId",
  /** Gets the diagnostic ram memory failure id. */
  DiagnosticRamFailureId = "DiagnosticRamFailureId",
  /** Gets the diagnostic vehicle active (idle or driving) id. */
  DiagnosticVehicleActiveId = "DiagnosticVehicleActiveId",
  /** Gets the diagnostic id for peripheral device: reefer temp zone 1. */
  DiagnosticReeferTemperatureZone1Id = "DiagnosticReeferTemperatureZone1Id",
  /** Gets the diagnostic id for peripheral device: reefer temp zone 2. */
  DiagnosticReeferTemperatureZone2Id = "DiagnosticReeferTemperatureZone2Id",
  /** Gets the diagnostic id for peripheral device: reefer temp zone 3. */
  DiagnosticReeferTemperatureZone3Id = "DiagnosticReeferTemperatureZone3Id",
  /** Gets the diagnostic id for peripheral device: reefer temp zone 4. */
  DiagnosticReeferTemperatureZone4Id = "DiagnosticReeferTemperatureZone4Id",
  /** Gets the diagnostic id for analog auxiliary 1. */
  DiagnosticAnalogAux1Id = "DiagnosticAnalogAux1Id",
  /** Gets the diagnostic id for analog auxiliary 2. */
  DiagnosticAnalogAux2Id = "DiagnosticAnalogAux2Id",
  /** Gets the diagnostic id for analog auxiliary 3. */
  DiagnosticAnalogAux3Id = "DiagnosticAnalogAux3Id",
  /** Gets the diagnostic id for analog auxiliary 4. */
  DiagnosticAnalogAux4Id = "DiagnosticAnalogAux4Id",
  /** Gets the diagnostic id for analog auxiliary 5. */
  DiagnosticAnalogAux5Id = "DiagnosticAnalogAux5Id",
  /** Gets the diagnostic id for analog auxiliary 6. */
  DiagnosticAnalogAux6Id = "DiagnosticAnalogAux6Id",
  /** Gets the diagnostic id for analog auxiliary 7. */
  DiagnosticAnalogAux7Id = "DiagnosticAnalogAux7Id",
  /** Gets the diagnostic id for analog auxiliary 8. */
  DiagnosticAnalogAux8Id = "DiagnosticAnalogAux8Id",
  /** Gets the diagnostic id for State of Charge (SOC). */
  DiagnosticStateOfChargeId = "DiagnosticStateOfChargeId",
  /** Gets the diagnostic id for total lifetime battery energy in during AC charging. */
  DiagnosticTotalLifetimeBatteryEnergyInDuringACChargingId = "DiagnosticTotalLifetimeBatteryEnergyInDuringACChargingId",
  /** Gets the diagnostic id for total lifetime battery energy out during AC charging. */
  DiagnosticTotalLifetimeBatteryEnergyOutDuringACChargingId = "DiagnosticTotalLifetimeBatteryEnergyOutDuringACChargingId",
  /** Gets the diagnostic id for total lifetime battery energy in during DC charging. */
  DiagnosticTotalLifetimeBatteryEnergyInDuringDCChargingId = "DiagnosticTotalLifetimeBatteryEnergyInDuringDCChargingId",
  /** Gets the diagnostic id for total lifetime battery energy out during DC charging. */
  DiagnosticTotalLifetimeBatteryEnergyOutDuringDCChargingId = "DiagnosticTotalLifetimeBatteryEnergyOutDuringDCChargingId",
  /** Gets the diagnostic id for Electric vehicle on-board charger total energy out during AC charging (since telematics device install). */
  DiagnosticTotalLifetimeOnBoardChargerEnergyOutDuringACChargingId = "DiagnosticTotalLifetimeOnBoardChargerEnergyOutDuringACChargingId",
  /** Gets the diagnostic id for total lifetime on board charger energy from an AC EVSE. */
  DiagnosticTotalLifetimeOnBoardChargerEnergyInDuringACChargingInId = "DiagnosticTotalLifetimeOnBoardChargerEnergyInDuringACChargingInId",
  /** Gets the electric vehicle battery total energy in while idling identifier. Units: kWh */
  DiagnosticTotalLifetimeEnergyInWhileIdlingId = "DiagnosticTotalLifetimeEnergyInWhileIdlingId",
  /** Gets the electric vehicle battery total energy in while idling identifier. Units: kWh */
  DiagnosticTotalLifetimeEnergyOutWhileIdlingId = "DiagnosticTotalLifetimeEnergyOutWhileIdlingId",
  /** Gets the diagnostic id for AC voltage. */
  DiagnosticOnBoardChargerAcInputVoltageId = "DiagnosticOnBoardChargerAcInputVoltageId",
  /** Gets the diagnostic id for the IsCharging signal */
  DiagnosticElectricVehicleIsChargingId = "DiagnosticElectricVehicleIsChargingId",
  /** Gets the diagnostic id for charge type (AC or DC). */
  DiagnosticElectricVehicleChargingStateId = "DiagnosticElectricVehicleChargingStateId",
  /** Gets the diagnostic id for electric vehicle battery power. */
  DiagnosticElectricVehicleBatteryPowerId = "DiagnosticElectricVehicleBatteryPowerId",
  /** Gets the diagnostic id for the power going into the on-board charger from an AC EVSE (W). */
  DiagnosticOnBoardChargerACInputPowerId = "DiagnosticOnBoardChargerACInputPowerId",
  /** Gets the diagnostic id for the power coming out of the on-board charger in the form of DC (W). */
  DiagnosticOnBoardChargerDCOutputPowerId = "DiagnosticOnBoardChargerPowerDCOutId",
  /** Gets the email template default application exception identifier. */
  EmailTemplateDefaultApplicationExceptionId = "EmailTemplateDefaultApplicationExceptionId",
  /** Gets the email template default exception rule identifier. */
  EmailTemplateDefaultExceptionRuleId = "EmailTemplateDefaultExceptionRuleId",
  /** Gets the default email template identifier for mainteannce reminders. */
  EmailTemplateDefaultMaintenanceReminderId = "EmailTemplateDefaultMaintenanceReminderId",
  /** Gets the engine type generic identifier. */
  EngineTypeGenericId = "EngineTypeGenericId",
  /** Gets the engine type none identifier. */
  EngineTypeNoneId = "EngineTypeNoneId",
  /** Gets the event type lease expiry identifier. */
  EventTypeLeaseExpiryId = "EventTypeLeaseExpiryId",
  /** Gets the event type license plate expiry identifier. */
  EventTypeLicensePlateExpiryId = "EventTypeLicensePlateExpiryId",
  /** Gets the event type oil change identifier. */
  EventTypeOilChangeId = "EventTypeOilChangeId",
  /** Gets the event type tire rotation identifier. */
  EventTypeTireRotationId = "EventTypeTireRotationId",
  /** Gets the group company identifier. */
  GroupCompanyId = "GroupCompanyId",
  /** Gets the group defects identifier. */
  GroupDefectsId = "GroupDefectsId",
  /** Gets the group drive user security identifier. */
  GroupDriveUserSecurityId = "GroupDriveUserSecurityId",
  /** Gets the group everything security identifier. */
  GroupEverythingSecurityId = "GroupEverythingSecurityId",
  /** Gets the group nothing security identifier. */
  GroupNothingSecurityId = "GroupNothingSecurityId",
  /** Gets the group private user identifier. */
  GroupPrivateUserId = "GroupPrivateUserId",
  /** Gets the group root identifier. */
  GroupRootId = "GroupRootId",
  /** Gets the group security identifier. */
  GroupSecurityId = "GroupSecurityId",
  /** Gets the group supervisor security identifier. */
  GroupSupervisorSecurityId = "GroupSupervisorSecurityId",
  /** Gets the group trailer defects identifier. */
  GroupTrailerDefectsId = "GroupTrailerDefectsId",
  /** Gets the group user security identifier. */
  GroupUserSecurityId = "GroupUserSecurityId",
  /** Gets the group vehicle defects identifier. */
  GroupVehicleDefectsId = "GroupVehicleDefectsId",
  /** Gets the group view only security identifier. */
  GroupViewOnlySecurityId = "GroupViewOnlySecurityId",
  /** Gets the group private scheduled report identifier. */
  GroupPrivateScheduledReportId = "GroupPrivateScheduledReportId",
  /** Gets the group view map only identifier. */
  GroupViewMapOnlySecurityId = "GroupViewMapOnlySecurityId",
  /** Gets the shareable link group identifier. */
  GroupShareableLinkGroupId = "GroupShareableLinkGroupId",
  /** Gets the default Trailer group identifier. */
  GroupTrailerId = "GroupTrailerId",
  /** Gets the driver activity group identifier. */
  GroupDriverActivityGroupId = "GroupDriverActivityGroupId",
  /** Gets the driver activity business group for trips identifier. */
  GroupBusinessGroupId = "GroupBusinessGroupId",
  /** Gets the driver activity personal group for trips identifier. */
  GroupPersonalGroupId = "GroupPersonalGroupId",
  /** Gets the asset information group. */
  GroupAssetInformationId = "GroupAssetInformationId",
  /** Gets the powertrain and fuel type group under asset information. */
  GroupPowertrainAndFuelTypeId = "GroupPowertrainAndFuelTypeId",
  /** Gets the internal combustion engine group. */
  GroupInternalCombustionEngineId = "GroupInternalCombustionEngineId",
  /** Gets the gasoline/petrol group. */
  GroupGasolinePetrolId = "GroupGasolinePetrolId",
  /** Gets the diesel group. */
  GroupDieselId = "GroupDieselId",
  /** Gets the ehtanol group. */
  GroupEthanolId = "GroupEthanolId",
  /** Gets the biodiesel group. */
  GroupBiodieselId = "GroupBiodieselId",
  /** Gets the compressed natural gas group. */
  GroupCompressedNaturalGasId = "GroupCompressedNaturalGasId",
  /** Gets the other fuel group. */
  GroupOtherFuelId = "GroupOtherFuelId",
  /** Gets the propane/liquified petroleum gas group. */
  GroupPropaneLiquifiedPetroleumGasId = "GroupPropaneLiquifiedPetroleumGasId",
  /** Gets the eletric/hybrid plug-in group. */
  GroupElectricHybridPluginId = "GroupElectricHybridPluginId",
  /** Gets the battery electric vehicle group. */
  GroupBatteryElectricVehicleId = "GroupBatteryElectricVehicleId",
  /** Gets the plug-in hybrid electric vehicle group. */
  GroupPluginHybridElectricVehicleId = "GroupPluginHybridElectricVehicleId",
  /** Gets the manually classified powertrain group. */
  GroupManuallyClassifiedPowertrainId = "GroupManuallyClassifiedPowertrainId",
  /** Gets the fuel cell electric vehicle group. */
  GroupFuelCellElectricVehicleId = "GroupFuelCellElectricVehicleId",
  /** Gets the default Asset Type group identifier. */
  GroupAssetTypeId = "GroupAssetTypeId",
  /** Gets the default Vehicle group identifier. */
  GroupVehicleId = "GroupVehicleId",
  /** Gets the no device identifier. */
  NoDeviceId = "NoDeviceId",
  /** Gets the no diagnostic identifier. */
  NoDiagnosticId = "NoDiagnosticId",
  /** Gets the no driver identifier. */
  NoDriverId = "NoDriverId",
  /** Gets the no exception event identifier. */
  NoExceptionEventId = "NoExceptionEventId",
  /** Gets the no failure mode identifier. */
  NoFailureModeId = "NoFailureModeId",
  /** Gets the no group identifier. */
  NoGroupId = "NoGroupId",
  /** Gets the no recipient identifier. */
  NoRecipientId = "NoRecipientId",
  /** Gets the no rule identifier. */
  NoRuleId = "NoRuleId",
  /** Gets the no trailer identifier. */
  NoTrailerId = "NoTrailerId",
  /** Gets the no user identifier. */
  NoUserId = "NoUserId",
  /** Gets the no zone identifier. */
  NoZoneId = "NoZoneId",
  /** Gets the parameter group none identifier. */
  ParameterGroupNoneId = "ParameterGroupNoneId",
  /** Gets the report template advanced audit log identifier. */
  ReportTemplateAdvancedAuditLogId = "ReportTemplateAdvancedAuditLogId",
  /** Gets the report template advanced auxiliary detail identifier. */
  ReportTemplateAdvancedAuxiliaryDetailId = "ReportTemplateAdvancedAuxiliaryDetailId",
  /** Gets the report template advanced auxiliary summary identifier. */
  ReportTemplateAdvancedAuxiliarySummaryId = "ReportTemplateAdvancedAuxiliarySummaryId",
  /** Gets the report template advanced charge event identifier. */
  ReportTemplateAdvancedChargeEventId = "ReportTemplateAdvancedChargeEventId",
  /** Gets the report template advanced congregation identifier. */
  ReportTemplateAdvancedCongregationId = "ReportTemplateAdvancedCongregationId",
  /** Gets the report template advanced customer visits detail identifier. */
  ReportTemplateAdvancedCustomerVisitsDetailId = "ReportTemplateAdvancedCustomerVisitsDetailId",
  /** Gets the report template advanced customer visits summary identifier. */
  ReportTemplateAdvancedCustomerVisitsSummaryId = "ReportTemplateAdvancedCustomerVisitsSummaryId",
  /** Gets the report template advanced device install history identifier. */
  ReportTemplateAdvancedDeviceInstallHistoryId = "ReportTemplateAdvancedDeviceInstallHistoryId",
  /** Gets the report template advanced diagnostics identifier. */
  ReportTemplateAdvancedDiagnosticsId = "ReportTemplateAdvancedDiagnosticsId",
  /** Gets the report template advanced DVIR identifier. */
  ReportTemplateAdvancedDVIRId = "ReportTemplateAdvancedDVIRId",
  /** Gets the report template advanced engine fault identifier. */
  ReportTemplateAdvancedEngineFaultId = "ReportTemplateAdvancedEngineFaultId",
  /** Gets the report template advanced engine status identifier. */
  ReportTemplateAdvancedEngineStatusId = "ReportTemplateAdvancedEngineStatusId",
  /** Gets the report template advanced engine summary identifier. */
  ReportTemplateAdvancedEngineSummaryId = "ReportTemplateAdvancedEngineSummaryId",
  /** Gets the report template advanced event history identifier. */
  ReportTemplateAdvancedEventHistoryId = "ReportTemplateAdvancedEventHistoryId",
  /** Gets the report template advanced event rule device identifier. */
  ReportTemplateAdvancedEventRuleDeviceId = "ReportTemplateAdvancedEventRuleDeviceId",
  /** Gets the report template advanced exceptions detail identifier. */
  ReportTemplateAdvancedExceptionsDetailId = "ReportTemplateAdvancedExceptionsDetailId",
  /** Gets the report template advanced exceptions summary identifier. */
  ReportTemplateAdvancedExceptionsSummaryId = "ReportTemplateAdvancedExceptionsSummaryId",
  /** Gets the report template advanced EV battery health identifier. */
  ReportTemplateAdvancedEVBatteryHealthId = "ReportTemplateAdvancedEVBatteryHealthId",
  /** Gets the report template advanced failure mode identifier. */
  ReportTemplateAdvancedFailureModeId = "ReportTemplateAdvancedFailureModeId",
  /** Gets the report template advanced fuel tax identifier. */
  ReportTemplateAdvancedFuelTaxId = "ReportTemplateAdvancedFuelTaxId",
  /** Gets the report template advanced fuel usage identifier. */
  ReportTemplateAdvancedFuelUsageId = "ReportTemplateAdvancedFuelUsageId",
  /** Gets the report template advanced groups identifier. */
  ReportTemplateAdvancedGroupsId = "ReportTemplateAdvancedGroupsId",
  /** Gets the report template advanced hos log identifier. */
  ReportTemplateAdvancedHOSLogId = "ReportTemplateAdvancedHOSLogId",
  /** Gets the report template advanced hos violation identifier. */
  ReportTemplateAdvancedHOSViolationId = "ReportTemplateAdvancedHOSViolationId",
  /** Gets the report template advanced HOS availability identifier. */
  ReportTemplateAdvancedHOSAvailabilityId = "ReportTemplateAdvancedHOSAvailabilityId",
  /** Gets the report template advanced log details identifier. */
  ReportTemplateAdvancedLogDetailsId = "ReportTemplateAdvancedLogDetailsId",
  /** Gets the report template advanced maintenance reminders identifier. */
  ReportTemplateAdvancedMaintenanceRemindersId = "ReportTemplateAdvancedMaintenanceRemindersId",
  /** Gets the report template advanced material management identifier. */
  ReportTemplateAdvancedMaterialManagementId = "ReportTemplateAdvancedMaterialManagementId",
  /** Gets the report template advanced notifications identifier. */
  ReportTemplateAdvancedNotificationsId = "ReportTemplateAdvancedNotificationsId",
  /** Gets the report template advanced plan vs actual route identifier. */
  ReportTemplateAdvancedPlanVsActualRouteId = "ReportTemplateAdvancedPlanVsActualRouteId",
  /** Gets the report template advanced risk management identifier. */
  ReportTemplateAdvancedRiskManagementId = "ReportTemplateAdvancedRiskManagementId",
  /** Gets the report template advanced route completion identifier. */
  ReportTemplateAdvancedRouteCompletionId = "ReportTemplateAdvancedRouteCompletionId",
  /** Gets the report template advanced route directions identifier. */
  ReportTemplateAdvancedRouteDirectionsId = "ReportTemplateAdvancedRouteDirectionsId",
  /** Gets the report template advanced route summary identifier. */
  ReportTemplateAdvancedRouteSummaryId = "ReportTemplateAdvancedRouteSummaryId",
  /** Gets the report template advanced service status identifier. */
  ReportTemplateAdvancedServiceStatusId = "ReportTemplateAdvancedServiceStatusId",
  /** Gets the report template advanced text messages identifier. */
  ReportTemplateAdvancedTextMessagesId = "ReportTemplateAdvancedTextMessagesId",
  /** Gets the report template advanced time card identifier. */
  ReportTemplateAdvancedTimeCardId = "ReportTemplateAdvancedTimeCardId",
  /** Gets the report template advanced time performance identifier. */
  ReportTemplateAdvancedTimePerformanceId = "ReportTemplateAdvancedTimePerformanceId",
  /** Gets the report template advanced trips detail identifier. */
  ReportTemplateAdvancedTripsDetailId = "ReportTemplateAdvancedTripsDetailId",
  /** Gets the report template advanced trips summary identifier. */
  ReportTemplateAdvancedTripsSummaryId = "ReportTemplateAdvancedTripsSummaryId",
  /** Gets the report template advanced unmatched route identifier. */
  ReportTemplateAdvancedUnmatchedRouteId = "ReportTemplateAdvancedUnmatchedRouteId",
  /** Gets the report template advanced users identifier. */
  ReportTemplateAdvancedUsersId = "ReportTemplateAdvancedUsersId",
  /** Gets the report template advanced value performance identifier. */
  ReportTemplateAdvancedValuePerformanceId = "ReportTemplateAdvancedValuePerformanceId",
  /** Gets the report template advanced vehicles identifier. */
  ReportTemplateAdvancedVehiclesId = "ReportTemplateAdvancedVehiclesId",
  /** Gets the report template advanced zones identifier. */
  ReportTemplateAdvancedZonesId = "ReportTemplateAdvancedZonesId",
  /** Gets the report template audit log identifier. */
  ReportTemplateAuditLogId = "ReportTemplateAuditLogId",
  /** Gets the report template auxiliary detail identifier. */
  ReportTemplateAuxiliaryDetailId = "ReportTemplateAuxiliaryDetailId",
  /** Gets the report template auxiliary summary identifier. */
  ReportTemplateAuxiliarySummaryId = "ReportTemplateAuxiliarySummaryId",
  /** Gets the report template charge event identifier. */
  ReportTemplateChargeEventId = "ReportTemplateChargeEventId",
  /** Gets the report template congregation identifier. */
  ReportTemplateCongregationId = "ReportTemplateCongregationId",
  /** Gets the report template customer visits detail identifier. */
  ReportTemplateCustomerVisitsDetailId = "ReportTemplateCustomerVisitsDetailId",
  /** Gets the report template customer visits summary identifier. */
  ReportTemplateCustomerVisitsSummaryId = "ReportTemplateCustomerVisitsSummaryId",
  /** Gets the report template device install history identifier. */
  ReportTemplateDeviceInstallHistoryId = "ReportTemplateDeviceInstallHistoryId",
  /** Gets the report template diagnostics identifier. */
  ReportTemplateDiagnosticsId = "ReportTemplateDiagnosticsId",
  /** Gets the report template Fill ups identifier. */
  ReportTemplateFillUpsId = "ReportTemplateFillUpsId",
  /** Gets the report template DVIR identifier. */
  ReportTemplateDVIRId = "ReportTemplateDVIRId",
  /** Gets the report template engine fault identifier. */
  ReportTemplateEngineFaultId = "ReportTemplateEngineFaultId",
  /** Gets the report template engine status identifier. */
  ReportTemplateEngineStatusId = "ReportTemplateEngineStatusId",
  /** Gets the report template engine summary identifier. */
  ReportTemplateEngineSummaryId = "ReportTemplateEngineSummaryId",
  /** Gets the report template event history identifier. */
  ReportTemplateEventHistoryId = "ReportTemplateEventHistoryId",
  /** Gets the report template event rule device identifier. */
  ReportTemplateEventRuleDeviceId = "ReportTemplateEventRuleDeviceId",
  /** Gets the report template exceptions detail identifier. */
  ReportTemplateExceptionsDetailId = "ReportTemplateExceptionsDetailId",
  /** Gets the report template exceptions summary identifier. */
  ReportTemplateExceptionsSummaryId = "ReportTemplateExceptionsSummaryId",
  /** Gets the report template EV battery health identifier. */
  ReportTemplateEVBatteryHealthId = "ReportTemplateEVBatteryHealthId",
  /** Gets the report template failure mode identifier. */
  ReportTemplateFailureModeId = "ReportTemplateFailureModeId",
  /** Gets the report template fuel tax identifier. */
  ReportTemplateFuelTaxId = "ReportTemplateFuelTaxId",
  /** Gets the report template fuel usage identifier. */
  ReportTemplateFuelUsageId = "ReportTemplateFuelUsageId",
  /** Gets the report template groups identifier. */
  ReportTemplateGroupsId = "ReportTemplateGroupsId",
  /** Gets the report template HOS log identifier. */
  ReportTemplateHOSLogId = "ReportTemplateHOSLogId",
  /** Gets the report template HOS violation identifier. */
  ReportTemplateHOSViolationId = "ReportTemplateHOSViolationId",
  /** Gets the report template HOS availability identifier. */
  ReportTemplateHOSAvailabilityId = "ReportTemplateHOSAvailabilityId",
  /** Gets the report template log details identifier. */
  ReportTemplateLogDetailsId = "ReportTemplateLogDetailsId",
  /** Gets the report template maintenance reminders identifier. */
  ReportTemplateMaintenanceRemindersId = "ReportTemplateMaintenanceRemindersId",
  /** Gets the report template material management identifier. */
  ReportTemplateMaterialManagementId = "ReportTemplateMaterialManagementId",
  /** Gets the report template notifications identifier. */
  ReportTemplateNotificationsId = "ReportTemplateNotificationsId",
  /** Gets the report template plan vs actual route identifier. */
  ReportTemplatePlanVsActualRouteId = "ReportTemplatePlanVsActualRouteId",
  /** Gets the report template risk management identifier. */
  ReportTemplateRiskManagementId = "ReportTemplateRiskManagementId",
  /** Gets the report template route completion identifier. */
  ReportTemplateRouteCompletionId = "ReportTemplateRouteCompletionId",
  /** Gets the report template route directions identifier. */
  ReportTemplateRouteDirectionsId = "ReportTemplateRouteDirectionsId",
  /** Gets the report template route summary identifier. */
  ReportTemplateRouteSummaryId = "ReportTemplateRouteSummaryId",
  /** Gets the report template service status identifier. */
  ReportTemplateServiceStatusId = "ReportTemplateServiceStatusId",
  /** Gets the report template text messages identifier. */
  ReportTemplateTextMessagesId = "ReportTemplateTextMessagesId",
  /** Gets the report template time card identifier. */
  ReportTemplateTimeCardId = "ReportTemplateTimeCardId",
  /** Gets the report template time performance identifier. */
  ReportTemplateTimePerformanceId = "ReportTemplateTimePerformanceId",
  /** Gets the report template trips detail identifier. */
  ReportTemplateTripsDetailId = "ReportTemplateTripsDetailId",
  /** Gets the report template trips summary identifier. */
  ReportTemplateTripsSummaryId = "ReportTemplateTripsSummaryId",
  /** Gets the report template unmatched route identifier. */
  ReportTemplateUnmatchedRouteId = "ReportTemplateUnmatchedRouteId",
  /** Gets the report template users identifier. */
  ReportTemplateUsersId = "ReportTemplateUsersId",
  /** Gets the report template value performance identifier. */
  ReportTemplateValuePerformanceId = "ReportTemplateValuePerformanceId",
  /** Gets the report template vehicles identifier. */
  ReportTemplateVehiclesId = "ReportTemplateVehiclesId",
  /** Gets the report template watchdog identifier. */
  ReportTemplateWatchdogId = "ReportTemplateWatchdogId",
  /** Gets the report template active engine faults identifier. */
  ReportTemplateActiveEngineFaultsId = "ReportTemplateActiveEngineFaultsId",
  /** Gets the report template aggressive driving identifier. */
  ReportTemplateAggressiveDrivingId = "ReportTemplateAggressiveDrivingId",
  /** Gets the report template asset utilization identifier. */
  ReportTemplateAssetUtilizationId = "ReportTemplateAssetUtilizationId",
  /** Gets the report template average fuel economy identifier. */
  ReportTemplateAverageFuelEconomyId = "ReportTemplateAverageFuelEconomyId",
  /** Gets the report template Driver Safety Scorecard identifier. */
  ReportTemplateDriverSafetyScorecardId = "ReportTemplateDriverSafetyScorecardId",
  /** Gets the report template ELD Diagnostics And Malfunctions identifier. */
  ReportTemplateELDDiagnosticsAndMalfunctionsId = "ReportTemplateELDDiagnosticsAndMalfunctionsId",
  /** Gets the report template ELD Unidentified Driver Logs identifier. */
  ReportTemplateELDUnidentifiedDriverLogsId = "ReportTemplateELDUnidentifiedDriverLogsId",
  /** Gets the report template ELD Unverified Logs identifier. */
  ReportTemplateELDUnverifiedLogsId = "ReportTemplateELDUnverifiedLogsId",
  /** Gets the report template Fleet Distance Trend identifier. */
  ReportTemplateFleetDistanceTrendId = "ReportTemplateFleetDistanceTrendId",
  /** Gets the report template Fleet Utilization identifier. */
  ReportTemplateFleetUtilizationId = "ReportTemplateFleetUtilizationId",
  /** Gets the report template HOS Violation Breakdown identifier. */
  ReportTemplateHOSViolationBreakdownId = "ReportTemplateHOSViolationBreakdownId",
  /** Gets the report template Idling Violations identifier. */
  ReportTemplateIdlingViolationsId = "ReportTemplateIdlingViolationsId",
  /** Gets the report template Max Speed identifier. */
  ReportTemplateMaxSpeedId = "ReportTemplateMaxSpeedId",
  /** Gets the report template Possible Collisions identifier. */
  ReportTemplatePossibleCollisionsId = "ReportTemplatePossibleCollisionsId",
  /** Gets the report template Seat Belt Violations identifier. */
  ReportTemplateSeatBeltViolationsId = "ReportTemplateSeatBeltViolationsId",
  /** Gets the report template speed violations identifier. */
  ReportTemplateSpeedViolationsId = "ReportTemplateSpeedViolationsId",
  /** Gets the report template Unrepaired Defects identifier. */
  ReportTemplateUnrepairedDefectsId = "ReportTemplateUnrepairedDefectsId",
  /** Gets the report template Unrepaired Defects identifier. */
  ReportTemplateTripCategorizationId = "ReportTemplateTripCategorizationId",
  /** Gets the report template progress report identifier. */
  ReportTemplateProgressReportId = "ReportTemplateProgressReportId",
  /** Gets the report template zones identifier. */
  ReportTemplateZonesId = "ReportTemplateZonesId",
  /** Gets the rule accident identifier. */
  RuleAccidentId = "RuleAccidentId",
  /** Gets the rule after hours usage identifier. */
  RuleAfterHoursUsageId = "RuleAfterHoursUsageId",
  /** Gets the rule alternator failed identifier. */
  RuleAlternatorFailedId = "RuleAlternatorFailedId",
  /** Gets the rule application exception identifier. */
  RuleApplicationExceptionId = "RuleApplicationExceptionId",
  /** Gets the rule at office longer than identifier. */
  RuleAtOfficeLongerThanId = "RuleAtOfficeLongerThanId",
  /** Gets the rule early leave identifier. */
  RuleEarlyLeaveId = "RuleEarlyLeaveId",
  /** Gets the rule engine abuse identifier. */
  RuleEngineAbuseId = "RuleEngineAbuseId",
  /** Gets the rule engine light on identifier. */
  RuleEngineLightOnId = "RuleEngineLightOnId",
  /** Gets the rule fleet idling identifier. */
  RuleFleetIdlingId = "RuleFleetIdlingId",
  /** Gets the rule harsh braking identifier. */
  RuleHarshBrakingId = "RuleHarshBrakingId",
  /** Gets the rule dvir defect identifier. */
  RuleDvirDefectId = "RuleDvirDefectId",
  /** Gets the rule harsh braking identifier. */
  RuleVehicleMovementWithinZonesId = "RuleVehicleMovementWithinZonesId",
  /** Gets the rule harsh cornering identifier. */
  RuleHarshCorneringId = "RuleHarshCorneringId",
  /** Gets the rule idling identifier. */
  RuleIdlingId = "RuleIdlingId",
  /** Gets the rule idling no PTO identifier. */
  RuleIdlingNoPtoId = "RuleIdlingNoPTOId",
  /** Gets the rule jackrabbit starts identifier. */
  RuleJackrabbitStartsId = "RuleJackrabbitStartsId",
  /** Gets the rule late arrival identifier. */
  RuleLateArrivalId = "RuleLateArrivalId",
  /** Gets the rule lights left on identifier. */
  RuleLightsLeftOnId = "RuleLightsLeftOnId",
  /** Gets the rule long lunch identifier. */
  RuleLongLunchId = "RuleLongLunchId",
  /** Gets the rule long stops during work hours identifier. */
  RuleLongStopsDuringWorkHoursId = "RuleLongStopsDuringWorkHoursId",
  /** Gets the rule low fuel level identifier. */
  RuleLowFuelLevelId = "RuleLowFuelLevelId",
  /** Gets the rule posted speeding identifier. */
  RulePostedSpeedingId = "RulePostedSpeedingId",
  /** Gets the rule reverse at start identifier. */
  RuleReverseAtStartId = "RuleReverseAtStartId",
  /** Gets the rule seat belt identifier. */
  RuleSeatbeltId = "RuleSeatbeltId",
  /** Gets the rule ELD yard move exemption identifier. */
  RuleFMCSAELDYardMoveExemptionId = "RuleFMCSAELDYardMoveExemptionId",
  /** Gets the rule ELD yard move exemption identifier. */
  RuleDVIRPreTripMissingId = "RuleDVIRPreTripMissingId",
  /** Gets the rule ELD yard move exemption identifier. */
  RuleDVIRPostTripMissingId = "RuleDVIRPostTripMissingId",
  /** Gets the rule unauthorized device removal identifier. */
  RuleUnauthorizedDeviceRemovalId = "RuleUnauthorizedDeviceRemovalId",
  /** Gets the rule unauthorized home stop identifier. */
  RuleUnauthorizedHomeStopId = "RuleUnauthorizedHomeStopId",
  /** Gets the rule EV Enter Charging Zone With Low Charge identifier. */
  RuleEVEnterChargingZoneWithLowChargeId = "RuleEVEnterChargingZoneWithLowChargeId",
  /** Gets the rule EV Low Charge identifier. */
  RuleEVLowChargeId = "RuleEVLowChargeId",
  /** Gets the rule EV Done Charging identifier. */
  RuleEVDoneChargingId = "RuleEVDoneChargingId",
  /** Gets the rule EV Exit Charging Zone With Low Charge identifier. */
  RuleEVExitChargingZoneWithLowChargeId = "RuleEVExitChargingZoneWithLowChargeId",
  /** Gets the rule Material management solid application. */
  RuleMaterialManagementSolidApplicationId = "RuleMaterialManagementSolidApplicationId",
  /** Gets the rule Material management pre wet application. */
  RuleMaterialManagementPreWetApplicationId = "RuleMaterialManagementPreWetApplicationId",
  /** Gets the rule Material management liquid application. */
  RuleMaterialManagementLiquidApplicationId = "RuleMaterialManagementLiquidApplicationId",
  /** Gets the rule Material management plow. */
  RuleMaterialManagementPlowActiveId = "RuleMaterialManagementPlowActiveId",
  /** Gets the rule Material management deadhead. */
  RuleMaterialManagementDeadheadId = "RuleMaterialManagementDeadheadId",
  /** Gets the rule Material management unload. */
  RuleMaterialManagementUnloadId = "RuleMaterialManagementUnloadId",
  /** Gets the rule for route based material management zone. */
  RuleMaterialManagementRouteBasedZoneOnlyId = "RuleMaterialManagementRouteBasedZoneOnlyId",
  /** Gets the rule for route based material management zone. */
  RuleEVStoppedInChargingLocationAndNotChargingId = "RuleEVStoppedInChargingLocationAndNotChargingId",
  /** Gets the rule for Vehicle ESR Health. */
  RuleVehicleESRHealthId = "RuleVehicleESRHealthId",
  /** Gets the rule for WiFi Tier Usage. */
  RuleWiFiTierUsageId = "RuleWiFiTierUsageId",
  /** Gets the rule for WiFi Max Tier Limit. */
  RuleWiFiMaxTierUsageId = "RuleWiFiMaxTierUsageId",
  /** Gets the source Geotab GO identifier. */
  SourceGeotabGoId = "SourceGeotabGoId",
  /** Gets the source J1708 identifier. */
  SourceJ1708Id = "SourceJ1708Id",
  /** Gets the source J1939 identifier. */
  SourceJ1939Id = "SourceJ1939Id",
  /** Gets the source OBD identifier. */
  SourceObdId = "SourceObdId",
  /** Gets the source system identifier. */
  SourceSystemId = "SourceSystemId",
  /** Gets the source third-party identifier. */
  SourceThirdPartyId = "SourceThirdPartyId",
  /** Gets the source OBD Source Address identifier. */
  SourceObdSaId = "SourceObdSaId",
  /** Gets the source Proprietary identifier. */
  SourceProprietaryId = "SourceProprietaryId",
  /** Gets the source Legacy proprietary identifier. */
  SourceLegacyId = "SourceLegacyId",
  /** Gets the source GMCCC identifier. */
  SourceGmcccId = "SourceGmcccId",
  /** Gets the source BRP identifier. */
  SourceBrpId = "SourceBrpId",
  /** Gets the source AI Model identifier. */
  SourceAiModelId = "SourceAIModelId",
  /** Gets the source Geotab GO obsolete identifier. */
  SourceGeotabGoObsoleteId = "SourceGeotabGoObsoleteId",
  /** Gets the source J1708 obsolete identifier. */
  SourceJ1708ObsoleteId = "SourceJ1708ObsoleteId",
  /** Gets the source J1939 obsolete identifier. */
  SourceJ1939ObsoleteId = "SourceJ1939ObsoleteId",
  /** Gets the source OBD obsolete identifier. */
  SourceObdObsoleteId = "SourceObdObsoleteId",
  /** Gets the source system obsolete identifier. */
  SourceSystemObsoleteId = "SourceSystemObsoleteId",
  /** Gets the source third-party obsolete identifier. */
  SourceThirdPartyObsoleteId = "SourceThirdPartyObsoleteId",
  /** Gets the source WWH OBD obsolete identifier. */
  SourceObdSaObsoleteId = "SourceObdSaObsoleteId",
  /** Gets the source Proprietary obsolete identifier. */
  SourceProprietaryObsoleteId = "SourceProprietaryObsoleteId",
  /** Gets the source Legacy proprietary obsolete identifier. */
  SourceLegacyObsoleteId = "SourceLegacyObsoleteId",
  /** Gets the source GMCCC obsolete identifier. */
  SourceGmcccObsoleteId = "SourceGmcccObsoleteId",
  /** Gets the source BRP obsolete identifier. */
  SourceBrpObsoleteId = "SourceBrpObsoleteId",
  /** Gets the source BRP obsolete identifier. */
  SourceAiModelObsoleteId = "SourceAiModelObsoleteId",
  /** Gets the system user identifier. */
  SystemUserId = "SystemUserId",
  /** Gets the text template default exception rule identifier. */
  TextTemplateDefaultExceptionRuleId = "TextTemplateDefaultExceptionRuleId",
  /** Gets the text template default exception rule popup identifier. */
  TextTemplateDefaultExceptionRulePopupId = "TextTemplateDefaultExceptionRulePopupId",
  /** Gets the distribution list news identifier. */
  DistributionListNewsId = "DistributionListNewsId",
  /** Gets the distribution list import/export identifier. */
  DistributionListImportExportId = "DistributionListImportExportId",
  /** Gets the unit of measure amps identifier. */
  UnitOfMeasureAmpsId = "UnitOfMeasureAmpsId",
  /** Gets the unit of measure bytes identifier. */
  UnitOfMeasureBytesId = "UnitOfMeasureBytesId",
  /** Gets the unit of measure cubic meters identifier. */
  UnitOfMeasureCubicMetersId = "UnitOfMeasureCubicMetersId",
  /** Gets the unit of measure cubic meters per second identifier. */
  UnitOfMeasureCubicMetersPerSecondId = "UnitOfMeasureCubicMetersPerSecondId",
  /** Gets the unit of measure degrees Celsius identifier. */
  UnitOfMeasureDegreesCelsiusId = "UnitOfMeasureDegreesCelsiusId",
  /** Gets the unit of measure grams identifier. */
  UnitOfMeasureGramsId = "UnitOfMeasureGramsId",
  /** Gets the unit of measure grams per second identifier. */
  UnitOfMeasureGramsPerSecondId = "UnitOfMeasureGramsPerSecondId",
  /** Gets the unit of measure grams per square meter identifier. */
  UnitOfMeasureGramsPerSquareMeterId = "UnitOfMeasureGramsPerSquareMeterId",
  /** Gets the unit of measure kilograms per kilometer identifier. */
  UnitOfMeasureKilogramsPerKilometerId = "UnitOfMeasureKilogramsPerKilometerId",
  /** Gets the unit of measure Hertz identifier. */
  UnitOfMeasureHertzId = "UnitOfMeasureHertzId",
  /** Gets the unit of measure kilometers per hour identifier. */
  UnitOfMeasureKilometersPerHourId = "UnitOfMeasureKilometersPerHourId",
  /** Gets the unit of measure kilometers per kilogram identifier. */
  UnitOfMeasureKilometersPerKilogramId = "UnitOfMeasureKilometersPerKilogramId",
  /** Gets the unit of measure kilometers per liter identifier. */
  UnitOfMeasureKilometersPerKiloWattHourId = "UnitOfMeasureKilometersPerKiloWattHourId",
  /** Gets the unit of measure kilometers per liter identifier. */
  UnitOfMeasureKilometersPerLiterId = "UnitOfMeasureKilometersPerLiterId",
  /** Gets the unit of measure kilowatt-hours identifier. */
  UnitOfMeasureKiloWattHoursId = "UnitOfMeasureKiloWattHoursId",
  /** Gets the unit of measure liters identifier. */
  UnitOfMeasureLitersId = "UnitOfMeasureLitersId",
  /** Gets the unit of measure liters per lane kilometer identifier. */
  UnitOfMeasureLitersPerLaneKilometerId = "UnitOfMeasureLitersPerLaneKilometerId",
  /** Gets the unit of measure liters per tonne identifier. */
  UnitOfMeasureLitersPerTonneId = "UnitOfMeasureLitersPerTonneId",
  /** Gets the unit of measure meters identifier. */
  UnitOfMeasureMetersId = "UnitOfMeasureMetersId",
  /** Gets the unit of measure meters per second squared identifier. */
  UnitOfMeasureMetersPerSecondSquaredId = "UnitOfMeasureMetersPerSecondSquaredId",
  /** Gets the unit of measure Newton meters identifier. */
  UnitOfMeasureNewtonMetersId = "UnitOfMeasureNewtonMetersId",
  /** Gets the unit of measure Newtons identifier. */
  UnitOfMeasureNewtonsId = "UnitOfMeasureNewtonsId",
  /** Gets the unit of measure none identifier. */
  UnitOfMeasureNoneId = "UnitOfMeasureNoneId",
  /** Gets the unit of measure Ohms identifier. */
  UnitOfMeasureOhmsId = "UnitOfMeasureOhmsId",
  /** Gets the unit of measure Ohms per second identifier. */
  UnitOfMeasureOhmsPerSecondId = "UnitOfMeasureOhmsPerSecondId",
  /** Gets the unit of measure parts per million identifier. */
  UnitOfMeasurePartsPerMillionId = "UnitOfMeasurePartsPerMillionId",
  /** Gets the unit of measure Pascals identifier. */
  UnitOfMeasurePascalsId = "UnitOfMeasurePascalsId",
  /** Gets the unit of measure percentage identifier. */
  UnitOfMeasurePercentageId = "UnitOfMeasurePercentageId",
  /** Gets the unit of measure pulses per meter identifier. */
  UnitOfMeasurePulsesPerMeterId = "UnitOfMeasurePulsesPerMeterId",
  /** Gets the unit of measure radians identifier. */
  UnitOfMeasureRadiansId = "UnitOfMeasureRadiansId",
  /** Gets the unit of measure revolutions identifier. */
  UnitOfMeasureRevolutionsId = "UnitOfMeasureRevolutionsId",
  /** Gets the unit of measure revolutions per minute identifier. */
  UnitOfMeasureRevolutionsPerMinuteId = "UnitOfMeasureRevolutionsPerMinuteId",
  /** Gets the unit of measure seconds identifier. */
  UnitOfMeasureSecondsId = "UnitOfMeasureSecondsId",
  /** Gets the unit of measure Volts identifier. */
  UnitOfMeasureVoltsId = "UnitOfMeasureVoltsId",
  /** Gets the unit of measure Watts identifier. */
  UnitOfMeasureWattsId = "UnitOfMeasureWattsId",
  /** Gets the unknown driver identifier. */
  UnknownDriverId = "UnknownDriverId",
  /** Gets the user notification binary file start identifier. */
  UserNotificationBinaryFileStartId = "UserNotificationBinaryFileStartId",
  /** Gets the user report template identifier. */
  UserReportTemplateId = "UserReportTemplateId",
  /** Gets the user work time start identifier. */
  UserWorkTimeStartId = "UserWorkTimeStartId",
  /** Gets the work time all hours identifier. */
  WorkTimeAllHoursId = "WorkTimeAllHoursId",
  /** Gets the work time early departure hours identifier. */
  WorkTimeEarlyLeaveHoursId = "WorkTimeEarlyLeaveHoursId",
  /** Gets the work time late arrival hours identifier. */
  WorkTimeLateArrivalHoursId = "WorkTimeLateArrivalHoursId",
  /** Gets the work time lunch hours identifier. */
  WorkTimeLunchHoursId = "WorkTimeLunchHoursId",
  /** Gets the work time standard hours identifier. */
  WorkTimeStandardHoursId = "WorkTimeStandardHoursId",
  /** Gets the zone type address lookup identifier. */
  ZoneTypeAddressLookupId = "ZoneTypeAddressLookupId",
  /** Gets the zone type customer identifier. */
  ZoneTypeCustomerId = "ZoneTypeCustomerId",
  /** Gets the zone type home identifier. */
  ZoneTypeHomeId = "ZoneTypeHomeId",
  /** Gets the zone type office identifier. */
  ZoneTypeOfficeId = "ZoneTypeOfficeId",
  /** Gets hos Ruleset Id None. */
  HosRuleSetNone = "HosRuleSetNone",
  /** Gets hos Ruleset Id NoneCanada (South of 60). */
  HosRuleSetNoneCanada = "HosRuleSetNoneCanada",
  /** Gets hos Ruleset Id None Big Day. */
  HosRuleSetNone8Day = "HosRuleSetNone8Day",
  /** Gets hos Ruleset Id NoneCanada (North of 60). */
  HosRuleSetNoneCanadaNorthOf60 = "HosRuleSetNoneCanadaNorthOf60",
  /** Gets Australia Standard Hours Solo with Exemption Hours */
  HosRuleSetAustraliaStandardHoursSoloExemptionHours = "HosRuleSetAustraliaStandardHoursSoloExemptionHours",
  /** Gets hos Ruleset Id America7Day. */
  HosRuleSetAmerica7Day = "HosRuleSetAmerica7Day",
  /** Gets hos Ruleset Id America7DaySleeper. */
  HosRuleSetAmerica7DaySleeper = "HosRuleSetAmerica7DaySleeper",
  /** Gets hos Ruleset Id America7DayBig. */
  HosRuleSetAmerica7DayBig = "HosRuleSetAmerica7DayBig",
  /** Gets hos Ruleset Id America7DayBigSleeper. */
  HosRuleSetAmerica7DayBigSleeper = "HosRuleSetAmerica7DayBigSleeper",
  /** Gets hos Ruleset Id America8Day. */
  HosRuleSetAmerica8Day = "HosRuleSetAmerica8Day",
  /** Gets hos Ruleset Id America8DaySleeper. */
  HosRuleSetAmerica8DaySleeper = "HosRuleSetAmerica8DaySleeper",
  /** Gets hos Ruleset Id America8DayBig. */
  HosRuleSetAmerica8DayBig = "HosRuleSetAmerica8DayBig",
  /** Gets hos Ruleset Id America8DayBigSleeper. */
  HosRuleSetAmerica8DayBigSleeper = "HosRuleSetAmerica8DayBigSleeper",
  /** Gets hos Ruleset Id America7DayPassenger. */
  HosRuleSetAmerica7DayPassenger = "HosRuleSetAmerica7DayPassenger",
  /** Gets hos Ruleset Id America8DayPassenger. */
  HosRuleSetAmerica8DayPassenger = "HosRuleSetAmerica8DayPassenger",
  /** Gets hos Ruleset Id AmericaShortHaul. */
  HosRuleSetAmericaShortHaul = "HosRuleSetAmericaShortHaul",
  /** Gets hos Ruleset Id AmericaShortHaul8Day. */
  HosRuleSetAmericaShortHaul8Day = "HosRuleSetAmericaShortHaul8Day",
  /** Gets hos Ruleset Id AmericaShortHaul14hrWorkday. */
  HosRuleSetAmericaShortHaul14hrWorkday = "HosRuleSetAmericaShortHaul14hrWorkday",
  /** Gets hos Ruleset Id AmericaShortHaul8Day14hrWorkday. */
  HosRuleSetAmericaShortHaul8Day14hrWorkday = "HosRuleSetAmericaShortHaul8Day14hrWorkday",
  /** Gets hos Ruleset Id AmericaShortHaulPassenger. */
  HosRuleSetAmericaShortHaulPassenger = "HosRuleSetAmericaShortHaulPassenger",
  /** Gets hos Ruleset Id AmericaShortHaulPassenger8Day. */
  HosRuleSetAmericaShortHaulPassenger8Day = "HosRuleSetAmericaShortHaulPassenger8Day",
  /** Gets the MimeTaskType unknown type identifier. */
  MimeTaskTypeUnknownId = "MimeTaskTypeUnknownId",
  /** Gets the MimeTaskType application/mdf4 identifier. */
  MimeTaskTypeApplicationMdf4Id = "MimeTaskTypeApplicationMdf4Id",
  /** Gets the DatPrivacyType Unknown identifier. */
  UnknownRestrictedDataModeId = "UnknownRestrictedDataModeId",
  /** Gets the DataModeType Public identifier. */
  UnrestrictedDataModeId = "UnrestrictedDataModeId",
  /** Gets the DataModeType Private identifier. */
  RestrictedDataModeId = "RestrictedDataModeId",
  /** Gets the DataModeType Private Strict identifier. */
  UserRestrictedDataModeId = "UserRestrictedDataModeId",
  /** Gets the ExceptionEventState Valid identifier. */
  ExceptionEventStateValidId = "ExceptionEventStateValidId",
  /** Gets the ExceptionEventState Invalid identifier. */
  ExceptionEventStateInvalidId = "ExceptionEventStateInvalidId",
  /** Gets the ExceptionEventState Dismissed identifier. */
  ExceptionEventStateDismissedId = "ExceptionEventStateDismissedId",
  /** Gets hos Ruleset Id CanadaCycleOne. */
  HosRuleSetCanadaCycleOne = "HosRuleSetCanadaCycleOne",
  /** Gets hos Ruleset Id CanadaCycleTwo. */
  HosRuleSetCanadaCycleTwo = "HosRuleSetCanadaCycleTwo",
  /** Gets hos Ruleset Id CanadaCycleOneTeam. */
  HosRuleSetCanadaCycleOneTeam = "HosRuleSetCanadaCycleOneTeam",
  /** Gets hos Ruleset Id CanadaCycleTwoTeam. */
  HosRuleSetCanadaCycleTwoTeam = "HosRuleSetCanadaCycleTwoTeam",
  /** Gets hos Ruleset Id CanadaNorthOf60CycleOne. */
  HosRuleSetCanadaNorthOf60CycleOne = "HosRuleSetCanadaNorthOf60CycleOne",
  /** Gets hos Ruleset Id CanadaNorthOf60CycleTwo. */
  HosRuleSetCanadaNorthOf60CycleTwo = "HosRuleSetCanadaNorthOf60CycleTwo",
  /** Gets hos Ruleset Id CanadaNorthOf60CycleOneTeam. */
  HosRuleSetCanadaNorthOf60CycleOneTeam = "HosRuleSetCanadaNorthOf60CycleOneTeam",
  /** Gets hos Ruleset Id CanadaNorthOf60CycleTwoTeam. */
  HosRuleSetCanadaNorthOf60CycleTwoTeam = "HosRuleSetCanadaNorthOf60CycleTwoTeam",
  /** Gets hos Ruleset Id CaliforniaProperty. */
  HosRuleSetCaliforniaProperty = "HosRuleSetCaliforniaProperty",
  /** Gets hos Ruleset Id CaliforniaFlammableLiquid. */
  HosRuleSetCaliforniaFlammableLiquid = "HosRuleSetCaliforniaFlammableLiquid",
  /** Gets hos Ruleset Id CaliforniaFlammableLiquid With Rest Requirement. */
  HosRuleSetCaliforniaFlammableLiquidWithRestRequirement = "HosRuleSetCaliforniaFlammableLiquidWithRestRequirement",
  /** Gets hos Ruleset Id CaliforniaSchoolPupil. */
  HosRuleSetCaliforniaSchoolPupil = "HosRuleSetCaliforniaSchoolPupil",
  /** Gets hos Ruleset Id CaliforniaSchoolPupil With Rest Requirement. */
  HosRuleSetCaliforniaSchoolPupilWithRestRequirement = "HosRuleSetCaliforniaSchoolPupilWithRestRequirement",
  /** Gets hos Ruleset Id CaliforniaFarmProduct. */
  HosRuleSetCaliforniaFarmProduct = "HosRuleSetCaliforniaFarmProduct",
  /** Gets hos Ruleset Id CaliforniaFarmProduct With Rest Requirement. */
  HosRuleSetCaliforniaFarmProductWithRestRequirement = "HosRuleSetCaliforniaFarmProductWithRestRequirement",
  /** Gets hos Ruleset Id CaliforniaPassenger. */
  HosRuleSetCaliforniaPassenger = "HosRuleSetCaliforniaPassenger",
  /** Gets hos Ruleset Id OilTransport7Day. */
  HosRuleSetOilTransport7Day = "HosRuleSetOilTransport7Day",
  /** Gets hos Ruleset Id OilTransport7DaySleeper. */
  HosRuleSetOilTransport7DaySleeper = "HosRuleSetOilTransport7DaySleeper",
  /** Gets hos Ruleset Id OilTransport7DayBig. */
  HosRuleSetOilTransport7DayBig = "HosRuleSetOilTransport7DayBig",
  /** Gets hos Ruleset Id OilTransport7DayBigSleeper. */
  HosRuleSetOilTransport7DayBigSleeper = "HosRuleSetOilTransport7DayBigSleeper",
  /** Gets hos Ruleset Id OilTransport8Day. */
  HosRuleSetOilTransport8Day = "HosRuleSetOilTransport8Day",
  /** Gets hos Ruleset Id OilTransport8DaySleeper. */
  HosRuleSetOilTransport8DaySleeper = "HosRuleSetOilTransport8DaySleeper",
  /** Gets hos Ruleset Id OilTransport8DayBig. */
  HosRuleSetOilTransport8DayBig = "HosRuleSetOilTransport8DayBig",
  /** Gets hos Ruleset Id OilTransport8DayBigSleeper. */
  HosRuleSetOilTransport8DayBigSleeper = "HosRuleSetOilTransport8DayBigSleeper",
  /** Gets hos Ruleset Id OilTransportShortHaul. */
  HosRuleSetOilTransportShortHaul = "HosRuleSetOilTransportShortHaul",
  /** Gets hos Ruleset Id OilTransportShortHaul8Day. */
  HosRuleSetOilTransportShortHaul8Day = "HosRuleSetOilTransportShortHaul8Day",
  /** Gets hos Ruleset Id OilTransportShortHaul14hrWorkday. */
  HosRuleSetOilTransportShortHaul14hrWorkday = "HosRuleSetOilTransportShortHaul14hrWorkday",
  /** Gets hos Ruleset Id OilTransportShortHaul8Day14hrWorkday. */
  HosRuleSetOilTransportShortHaul8Day14hrWorkday = "HosRuleSetOilTransportShortHaul8Day14hrWorkday",
  /** Gets hos Ruleset Id OilWell7Day. */
  HosRuleSetOilWell7Day = "HosRuleSetOilWell7Day",
  /** Gets hos Ruleset Id OilWell7DaySleeper. */
  HosRuleSetOilWell7DaySleeper = "HosRuleSetOilWell7DaySleeper",
  /** Gets hos Ruleset Id OilWell7DayBig. */
  HosRuleSetOilWell7DayBig = "HosRuleSetOilWell7DayBig",
  /** Gets hos Ruleset Id OilWell7DayBigSleeper. */
  HosRuleSetOilWell7DayBigSleeper = "HosRuleSetOilWell7DayBigSleeper",
  /** Gets hos Ruleset Id OilWell8Day. */
  HosRuleSetOilWell8Day = "HosRuleSetOilWell8Day",
  /** Gets hos Ruleset Id OilWell8DaySleeper. */
  HosRuleSetOilWell8DaySleeper = "HosRuleSetOilWell8DaySleeper",
  /** Gets hos Ruleset Id OilWell8DayBig. */
  HosRuleSetOilWell8DayBig = "HosRuleSetOilWell8DayBig",
  /** Gets hos Ruleset Id OilWell8DayBigSleeper. */
  HosRuleSetOilWell8DayBigSleeper = "HosRuleSetOilWell8DayBigSleeper",
  /** Gets hos Ruleset Id AmericaSalesperson. */
  HosRuleSetAmericaSalesperson = "HosRuleSetAmericaSalesperson",
  /** Gets hos Ruleset Id AmericaSalespersonNonCdlShortHaul. */
  HosRuleSetAmericaSalespersonNonCdlShortHaul = "HosRuleSetAmericaSalespersonNonCdlShortHaul",
  /** Gets hos Ruleset Id AmericaTexas. */
  HosRuleSetAmericaTexas = "HosRuleSetAmericaTexas",
  /** Gets hos Ruleset Id AmericaTexasShortHaul. */
  HosRuleSetAmericaTexasShortHaul = "HosRuleSetAmericaTexasShortHaul",
  /** Gets hos Ruleset Id AmericaTexasShortHaul8Day. */
  HosRuleSetAmericaTexasShortHaul8Day = "HosRuleSetAmericaTexasShortHaul8Day",
  /** Gets hos Ruleset Id OilTransportTexas. */
  HosRuleSetOilTransportTexas = "HosRuleSetOilTransportTexas",
  /** Gets hos Ruleset Id OilWellTexas. */
  HosRuleSetOilWellTexas = "HosRuleSetOilWellTexas",
  /** Gets hos Ruleset Id OilTransportCalifornia8day. */
  HosRuleSetOilTransportCalifornia8day = "HosRuleSetOilTransportCalifornia8day",
  /** Gets hos Ruleset Id OilWellCalifornia8day. */
  HosRuleSetOilWellCalifornia8day = "HosRuleSetOilWellCalifornia8day",
  /** Gets hos Ruleset Id OilTransportCaliforniaProperty. */
  HosRuleSetOilTransportCaliforniaProperty = "HosRuleSetOilTransportCaliforniaProperty",
  /** Gets hos Ruleset Id OilWellCaliforniaProperty. */
  HosRuleSetOilWellCaliforniaProperty = "HosRuleSetOilWellCaliforniaProperty",
  /** Gets hos Ruleset Id Florida 7-day. */
  HosRuleSetFlorida7Day = "HosRuleSetFlorida7Day",
  /** Gets hos Ruleset Id Florida 8-day. */
  HosRuleSetFlorida8Day = "HosRuleSetFlorida8Day",
  /** Gets hos Ruleset Id Florida Short-haul 7 day. */
  HosRuleSetFloridaShortHaul7Day = "HosRuleSetFloridaShortHaul7Day",
  /** Gets hos Ruleset Id Florida Short-haul 8 day. */
  HosRuleSetFloridaShortHaul8Day = "HosRuleSetFloridaShortHaul8Day",
  /** Gets hos Ruleset Id 7-day without 34-h. */
  HosRuleSetAmerica7DayNo34h = "HosRuleSetAmerica7DayNo34h",
  /** Gets hos Ruleset Id 7-day without 34-h with Sleeper. */
  HosRuleSetAmerica7DayNo34hSleeper = "HosRuleSetAmerica7DayNo34hSleeper",
  /** Gets hos Ruleset Id 8-day without 34-h. */
  HosRuleSetAmerica8DayNo34h = "HosRuleSetAmerica8DayNo34h",
  /** Gets hos Ruleset Id 8-day without 34-h with Sleeper. */
  HosRuleSetAmerica8DayNo34hSleeper = "HosRuleSetAmerica8DayNo34hSleeper",
  /** Gets hos Ruleset Id Short-haul 7-day without 34-h. */
  HosRuleSetAmericaShortHaulNo34h = "HosRuleSetAmericaShortHaulNo34h",
  /** Gets hos Ruleset Id Short-haul 8-day without 34-h. */
  HosRuleSetAmericaShortHaul8DayNo34h = "HosRuleSetAmericaShortHaul8DayNo34h",
  /** Gets hos Ruleset Id Brazil property short haul. */
  HosRuleSetBrazilShortHaul = "HosRuleSetBrazilShortHaul",
  /** Gets hos Ruleset Id Carrier Exemption. */
  HosRuleSetCarrierExemption = "HosRuleSetCarrierExemption",
  /** Gets hos Ruleset Id America Non-CDL 7 day. */
  HosRuleSetAmericaNonCdlShortHaul7Day = "HosRuleSetAmericaNonCdlShortHaul7Day",
  /** Gets hos Ruleset Id America Non-CDL 8 day. */
  HosRuleSetAmericaNonCdlShortHaul8Day = "HosRuleSetAmericaNonCdlShortHaul8Day",
  /** Gets hos Ruleset Id WashingtonIntrastate7Day. */
  HosRuleSetWashingtonIntrastate7Day = "HosRuleSetWashingtonIntrastate7Day",
  /** Gets hos Ruleset Id WashingtonIntrastate8Day. */
  HosRuleSetWashingtonIntrastate8Day = "HosRuleSetWashingtonIntrastate8Day",
  /** Gets hos Ruleset Id America No Rest Requirement 7 Day. */
  HosRuleSetAmericaNoRestRequirement7Day = "HosRuleSetAmericaNoRestRequirement7Day",
  /** Gets hos Ruleset Id America No Rest Requirement 7 Day with Sleeper. */
  HosRuleSetAmericaNoRestRequirement7DaySleeper = "HosRuleSetAmericaNoRestRequirement7DaySleeper",
  /** Gets hos Ruleset Id America No Rest Requirement 7 Day Big. */
  HosRuleSetAmericaNoRestRequirement7DayBig = "HosRuleSetAmericaNoRestRequirement7DayBig",
  /** Gets hos Ruleset Id America No Rest Requirement 7 Day Big with Sleeper. */
  HosRuleSetAmericaNoRestRequirement7DayBigSleeper = "HosRuleSetAmericaNoRestRequirement7DayBigSleeper",
  /** Gets hos Ruleset Id America No Rest Requirement 8 Day. */
  HosRuleSetAmericaNoRestRequirement8Day = "HosRuleSetAmericaNoRestRequirement8Day",
  /** Gets hos Ruleset Id America No Rest Requirement 8 Day with Sleeper. */
  HosRuleSetAmericaNoRestRequirement8DaySleeper = "HosRuleSetAmericaNoRestRequirement8DaySleeper",
  /** Gets hos Ruleset Id America No Rest Requirement 8 Day Big. */
  HosRuleSetAmericaNoRestRequirement8DayBig = "HosRuleSetAmericaNoRestRequirement8DayBig",
  /** Gets hos Ruleset Id America No Rest Requirement 8 Day Big with Sleeper. */
  HosRuleSetAmericaNoRestRequirement8DayBigSleeper = "HosRuleSetAmericaNoRestRequirement8DayBigSleeper",
  /** Gets hos Ruleset Id America No Rest Requirement 7 Day with 24 hour reset. */
  HosRuleSetOilTransportNoRestRequirement7Day = "HosRuleSetOilTransportNoRestRequirement7Day",
  /** Gets hos Ruleset Id America No Rest Requirement 7 Day with 24 hour reset and split sleeper. */
  HosRuleSetOilTransportNoRestRequirement7DaySleeper = "HosRuleSetOilTransportNoRestRequirement7DaySleeper",
  /** Gets hos Ruleset Id America No Rest Requirement 7 Day Big with 24 hour reset. */
  HosRuleSetOilTransportNoRestRequirement7DayBig = "HosRuleSetOilTransportNoRestRequirement7DayBig",
  /** Gets hos Ruleset Id America No Rest Requirement 7 Day Big with 24 hour reset and split sleeper. */
  HosRuleSetOilTransportNoRestRequirement7DayBigSleeper = "HosRuleSetOilTransportNoRestRequirement7DayBigSleeper",
  /** Gets hos Ruleset Id America No Rest Requirement 8 Day with 24 hour reset. */
  HosRuleSetOilTransportNoRestRequirement8Day = "HosRuleSetOilTransportNoRestRequirement8Day",
  /** Gets hos Ruleset Id America No Rest Requirement 8 Day with 24 hour reset and split sleeper. */
  HosRuleSetOilTransportNoRestRequirement8DaySleeper = "HosRuleSetOilTransportNoRestRequirement8DaySleeper",
  /** Gets hos Ruleset Id America No Rest Requirement 8 Day Big with 24 hour reset. */
  HosRuleSetOilTransportNoRestRequirement8DayBig = "HosRuleSetOilTransportNoRestRequirement8DayBig",
  /** Gets hos Ruleset Id America No Rest Requirement 8 Day Big with 24 hour reset and split sleeper. */
  HosRuleSetOilTransportNoRestRequirement8DayBigSleeper = "HosRuleSetOilTransportNoRestRequirement8DayBigSleeper",
  /** Gets hos Ruleset Id America No Rest Requirement 7 Day with 24 hour reset and oil well. */
  HosRuleSetOilWellNoRestRequirement7Day = "HosRuleSetOilWellNoRestRequirement7Day",
  /** Gets hos Ruleset Id America No Rest Requirement 7 Day with 24 hour reset and oil well and split sleeper. */
  HosRuleSetOilWellNoRestRequirement7DaySleeper = "HosRuleSetOilWellNoRestRequirement7DaySleeper",
  /** Gets hos Ruleset Id America No Rest Requirement 7 Day Big with 24 hour reset and oil well. */
  HosRuleSetOilWellNoRestRequirement7DayBig = "HosRuleSetOilWellNoRestRequirement7DayBig",
  /** Gets hos Ruleset Id America No Rest Requirement 7 Day Big with 24 hour reset and oil well and split sleeper. */
  HosRuleSetOilWellNoRestRequirement7DayBigSleeper = "HosRuleSetOilWellNoRestRequirement7DayBigSleeper",
  /** Gets hos Ruleset Id America No Rest Requirement 8 Day with 24 hour reset and oil well. */
  HosRuleSetOilWellNoRestRequirement8Day = "HosRuleSetOilWellNoRestRequirement8Day",
  /** Gets hos Ruleset Id America No Rest Requirement 8 Day with 24 hour reset and oil well and split sleeper. */
  HosRuleSetOilWellNoRestRequirement8DaySleeper = "HosRuleSetOilWellNoRestRequirement8DaySleeper",
  /** Gets hos Ruleset Id America No Rest Requirement 8 Day Big with 24 hour reset and oil well. */
  HosRuleSetOilWellNoRestRequirement8DayBig = "HosRuleSetOilWellNoRestRequirement8DayBig",
  /** Gets hos Ruleset Id America No Rest Requirement 8 Day Big with 24 hour reset and oil well and split sleeper. */
  HosRuleSetOilWellNoRestRequirement8DayBigSleeper = "HosRuleSetOilWellNoRestRequirement8DayBigSleeper",
  /** Gets North Dakota 70-hour/7-day */
  HosRuleSetNorthDakota7Day = "HosRuleSetNorthDakota7Day",
  /** Gets South Carolina 70-hour/7-day */
  HosRuleSetSouthCarolina7Day = "HosRuleSetSouthCarolina7Day",
  /** Gets South Carolina 80-hour/8-day */
  HosRuleSetSouthCarolina8Day = "HosRuleSetSouthCarolina8Day",
  /** Gets Maryland Short Haul 70-hour/7-day */
  HosRuleSetMarylandShortHaul7Day = "HosRuleSetMarylandShortHaul7Day",
  /** Gets Maryland Short Haul 80-hour/8-day */
  HosRuleSetMarylandShortHaul8Day = "HosRuleSetMarylandShortHaul8Day",
  /** Gets North Dakota Short Haul 70-hour/7-day */
  HosRuleSetNorthDakotaShortHaul7Day = "HosRuleSetNorthDakotaShortHaul7Day",
  /** Gets Alaska Passenger 70-hour/7-day */
  HosRuleSetAlaskaPassenger7Day = "HosRuleSetAlaskaPassenger7Day",
  /** Gets Alaska Passenger 80-hour/8-day */
  HosRuleSetAlaskaPassenger8Day = "HosRuleSetAlaskaPassenger8Day",
  /** Gets Alaska Property 70-hour/7-day */
  HosRuleSetAlaskaProperty7Day = "HosRuleSetAlaskaProperty7Day",
  /** Gets Alaska Property 70-hour/7-day Sleeper */
  HosRuleSetAlaskaProperty7DaySleeper = "HosRuleSetAlaskaProperty7DaySleeper",
  /** Gets Alaska Property 80-hour/8-day */
  HosRuleSetAlaskaProperty8Day = "HosRuleSetAlaskaProperty8Day",
  /** Gets Alaska Property 80-hour/8-day Sleeper */
  HosRuleSetAlaskaProperty8DaySleeper = "HosRuleSetAlaskaProperty8DaySleeper",
  /** Gets Nebraska 70-hour/7-day */
  HosRuleSetNebraska7day = "HosRuleSetNebraska7day",
  /** Gets Nebraska 80-hour/8-day */
  HosRuleSetNebraska8day = "HosRuleSetNebraska8day",
  /** Gets California Property Intrastate */
  HosRuleSetCalifornia8day = "HosRuleSetCalifornia8day",
  /** Gets California Property Short-haul. */
  HosRuleSetCaliforniaPropertyShortHaul = "HosRuleSetCaliforniaPropertyShortHaul",
  /** Gets California Property Short-haul with rest. */
  HosRuleSetCaliforniaPropertyShortHaulWithRest = "HosRuleSetCaliforniaPropertyShortHaulWithRest",
  /** Gets Oregon 70-hour/7-day */
  HosRuleSetOregon7day = "HosRuleSetOregon7day",
  /** Gets Oregon 80-hour/8-day */
  HosRuleSetOregon8day = "HosRuleSetOregon8day",
  /** Gets hos Ruleset Id CanadaOil */
  HosRuleSetCanadaOil = "HosRuleSetCanadaOil",
  /** Gets hos Ruleset Id CanadaNorthOf60Oil */
  HosRuleSetCanadaNorthOf60Oil = "HosRuleSetCanadaNorthOf60Oil",
  /** Gets hos Ruleset Id CanadaOilTeam */
  HosRuleSetCanadaOilTeam = "HosRuleSetCanadaOilTeam",
  /** Gets hos Ruleset Id CanadaNorthOf60OilTeam */
  HosRuleSetCanadaNorthOf60OilTeam = "HosRuleSetCanadaNorthOf60OilTeam",
  /** Gets America 7-day Railroad */
  HosRuleSetAmerica7DayRailroad = "HosRuleSetAmerica7DayRailroad",
  /** Gets America 8-day Railroad */
  HosRuleSetAmerica8DayRailroad = "HosRuleSetAmerica8DayRailroad",
  /** Gets Identity DisplayUnitOfMeasure. */
  DisplayUnitOfMeasureIdentityId = "DisplayUnitOfMeasureIdentity",
  /** Gets the no display profile identifier. */
  NoDisplayProfileId = "NoDisplayProfileId",
  /** Gets DisplayMeasurementProfile Default Identity. */
  DisplayMeasurementProfileDefaultId = "DisplayMeasurementProfileDefaultId",
  /** Gets DisplayMeasurementProfile Canada Identity. */
  DisplayMeasurementProfileCanadaId = "DisplayMeasurementProfileCanadaId",
  /** Gets DisplayMeasurementProfile United States Identity. */
  DisplayMeasurementProfileUnitedStatesId = "DisplayMeasurementProfileUnitedStatesId",
  /** Gets DisplayMeasurementProfile UK Identity. */
  DisplayMeasurementProfileUKId = "DisplayMeasurementProfileUKId",
  /** Gets DisplayMeasurementProfile Mexico Identity. */
  DisplayMeasurementProfileMexicoId = "DisplayMeasurementMexicoId",
  /** Gets DisplayMeasurementProfile Europe Identity. */
  DisplayMeasurementProfileEuropeId = "DisplayMeasurementProfileEuropeId",
  /** Gets DisplayMeasurementProfile Australia and New Zealand Identity. */
  DisplayMeasurementProfileAustraliaNewZealandId = "DisplayMeasurementProfileAustraliaNewZealandId",
  /** Gets DisplayMeasurementProfile Central and South America Identity. */
  DisplayMeasurementProfileCentralSouthAmericaId = "DisplayMeasurementProfileCentralSouthAmericaId",
  /** Gets DisplayMeasurementProfile Asia Identity. */
  DisplayMeasurementProfileAsiaId = "DisplayMeasurementProfileAsiaId",
  /** Gets DisplayMeasurementProfile United States Identity. */
  DisplayMeasurementProfileAfricaId = "DisplayMeasurementProfileAfricaId",
  /**
   * Gets the securityId, Unknown identifier is not used for security purposes. It's used internally to indicate a particular type could not be translated into
   *  a security identifier. This always yields in access denied.
   */
  SecurityIdUnknownId = "SecurityIdUnknownId",
  /** Gets the securityId, Access to Everything. */
  SecurityIdEverythingId = "SecurityIdEverythingId",
  /** Gets the securityId, Access to SystemSettings. */
  SecurityIdSystemSettingsId = "SecurityIdSystemSettingsId",
  /** Gets the securityId, Access to ImportFromOtherDatabase. */
  SecurityIdImportFromOtherDatabaseId = "SecurityIdImportFromOtherDatabaseId",
  /** Gets the securityId, Access to AuditLog. */
  SecurityIdAuditLogId = "SecurityIdAuditLogId",
  /** Gets the securityId, Access to User/Driver List. */
  SecurityIdUserListId = "SecurityIdUserListId",
  /** Gets the securityId, Administer Users/Drivers. */
  SecurityIdUserAdminId = "SecurityIdUserAdminId",
  /** Gets the securityId, Access to PurgeData. */
  SecurityIdPurgeDataId = "SecurityIdPurgeDataId",
  /** Gets the securityId, Access to Device List. */
  SecurityIdDeviceListId = "SecurityIdDeviceListId",
  /** Gets the securityId, Access to EngineManagementReport. */
  SecurityIdEngineManagementReportId = "SecurityIdEngineManagementReportId",
  /** Gets the securityId, Access to List of ZoneType's. */
  SecurityIdZoneTypeListId = "SecurityIdZoneTypeListId",
  /** Gets the securityId, Access to ReprocessData. */
  SecurityIdReprocessDataId = "SecurityIdReprocessDataId",
  /** Gets the securityId, Access to WorkTimeList. */
  SecurityIdWorkTimeListId = "SecurityIdWorkTimeListId",
  /** Gets the securityId, Access to WorkHolidayList. */
  SecurityIdWorkHolidayListId = "SecurityIdWorkHolidayListId",
  /** Gets the securityId, Access to ZoneList. */
  SecurityIdZoneListId = "SecurityIdZoneListId",
  /** Gets the securityId, Access to ZoneAdmin. */
  SecurityIdZoneAdminId = "SecurityIdZoneAdminId",
  /** Gets the securityId, Access to ExceptionsList. */
  SecurityIdExceptionsListId = "SecurityIdExceptionsListId",
  /** Gets the securityId, Access to ReminderReport. */
  SecurityIdReminderReportId = "SecurityIdReminderReportId",
  /** Gets the securityId, Access to EventOccurrenceList. */
  SecurityIdEventOccurrenceListId = "SecurityIdEventOccurrenceListId",
  /** Gets the securityId, Access to NodesList. */
  SecurityIdNodesListId = "SecurityIdNodesListId",
  /** Gets the securityId, Access to ReminderRuleList. */
  SecurityIdReminderRuleListId = "SecurityIdReminderRuleListId",
  /** Gets the securityId, Access to ChangePassword. */
  SecurityIdChangePasswordId = "SecurityIdChangePasswordId",
  /** Gets the securityId, Access to CreateExtractKey. */
  SecurityIdCreateExtractKeyId = "SecurityIdCreateExtractKeyId",
  /** Gets the securityId, Access to CreateTestKey. */
  SecurityIdCreateTestKeyId = "SecurityIdCreateTestKeyId",
  /** Gets the securityId, Access to CreateFirmwareKey. */
  SecurityIdCreateFirmwareKeyId = "SecurityIdCreateFirmwareKeyId",
  /** Gets the securityId, Access to CreateProgrammingKey. */
  SecurityIdCreateProgrammingKeyId = "SecurityIdCreateProgrammingKeyId",
  /** Gets the securityId, Access to CreateKeyBackup. */
  SecurityIdCreateKeyBackupId = "SecurityIdCreateKeyBackupId",
  /** Gets the securityId, Access to RestoreKeyBackup. */
  SecurityIdRestoreKeyBackupId = "SecurityIdRestoreKeyBackupId",
  /** Gets the securityId, Access to CreateWifiKey. */
  SecurityIdCreateWifiKeyId = "SecurityIdCreateWifiKeyId",
  /** Gets the securityId, Access to ImportZones. */
  SecurityIdImportZonesId = "SecurityIdImportZonesId",
  /** Gets the securityId, Access to NotificationList. */
  SecurityIdNotificationListId = "SecurityIdNotificationListId",
  /** Gets the securityId, Access to OrganizeViews. */
  SecurityIdOrganizeViewsId = "SecurityIdOrganizeViewsId",
  /** Gets the securityId, Access to RouteList. */
  SecurityIdRouteListId = "SecurityIdRouteListId",
  /** Gets the securityId, Access to UserSettings. */
  SecurityIdUserSettingsId = "SecurityIdUserSettingsId",
  /** Gets the securityId, Access to EngineDiagnosticList. */
  SecurityIdEngineDiagnosticListId = "SecurityIdEngineDiagnosticListId",
  /** Gets the securityId, Access to EngineTypeList. */
  SecurityIdEngineTypeListId = "SecurityIdEngineTypeListId",
  /** Gets the securityId, Access to EngineFailureModeList. */
  SecurityIdEngineFailureModeListId = "SecurityIdEngineFailureModeListId",
  /** Gets the securityId, Access to EngineFlashCodelist. */
  SecurityIdEngineFlashCodelistId = "SecurityIdEngineFlashCodelistId",
  /** Gets the securityId, Access to EngineUnitOfMeasureList. */
  SecurityIdEngineUnitOfMeasureListId = "SecurityIdEngineUnitOfMeasureListId",
  /** Gets the securityId, Access to TripsActivityReport. */
  SecurityIdTripsActivityReportId = "SecurityIdTripsActivityReportId",
  /** Gets the securityId, Access to CongregationReport. */
  SecurityIdCongregationReportId = "SecurityIdCongregationReportId",
  /** Gets the securityId, Access to CustomerVisitsReport. */
  SecurityIdCustomerVisitsReportId = "SecurityIdCustomerVisitsReportId",
  /** Gets the securityId, Access to SpeedProfileReport. */
  SecurityIdSpeedProfileReportId = "SecurityIdSpeedProfileReportId",
  /** Gets the securityId, Access to TimeCardReport. */
  SecurityIdTimeCardReportId = "SecurityIdTimeCardReportId",
  /** Gets the securityId, Access to EngineStatusDataGraph. */
  SecurityIdEngineStatusDataGraphId = "SecurityIdEngineStatusDataGraphId",
  /** Gets the securityId, Access to ExceptionsReport. */
  SecurityIdExceptionsReportId = "SecurityIdExceptionsReportId",
  /** Gets the securityId, Access to RiskManagementReport. */
  SecurityIdRiskManagementReportId = "SecurityIdRiskManagementReportId",
  /** Gets the securityId, Access to RouteSummaryReport. */
  SecurityIdRouteSummaryReportId = "SecurityIdRouteSummaryReportId",
  /** Gets the securityId, Access to UnassignedRouteReport. */
  SecurityIdUnassignedRouteReportId = "SecurityIdUnassignedRouteReportId",
  /** Gets the securityId, Access to AccidentDebugReport. */
  SecurityIdAccidentDebugReportId = "SecurityIdAccidentDebugReportId",
  /** Gets the securityId, Access to DeviceInstallHistoryReport. */
  SecurityIdDeviceInstallHistoryReportId = "SecurityIdDeviceInstallHistoryReportId",
  /** Gets the securityId, Allows the user to Launch Custom Reports and Add-Ins. */
  SecurityIdLaunchAddInId = "SecurityIdLaunchAddInId",
  /** Gets the securityId, Access to DeviceAdmin. */
  SecurityIdDeviceAdminId = "SecurityIdDeviceAdminId",
  /** Gets the securityId, Access to removing vehicle, unpluging device, and replacing device. */
  SecurityIdDeviceAdminDeleteUnplugReplaceId = "SecurityIdDeviceAdminDeleteUnplugReplaceId",
  /** Gets the securityId, Access to KeyInformation. */
  SecurityIdKeyInformationId = "SecurityIdKeyInformationId",
  /** Gets the securityId, Access to SecurityClearanceList. */
  SecurityIdSecurityClearanceListId = "SecurityIdSecurityClearanceListId",
  /**
   * Gets the securityId, required to support WATERMARK and is only applicable if their custom
   *  code has been configured.
   */
  SecurityIdTrackHistoricDataId = "SecurityIdTrackHistoricDataId",
  /** Gets the securityId, "SecurityIdServices" settings tab. */
  SecurityIdServicesSettingsId = "SecurityIdServicesSettingsId",
  /** Gets the securityId, This is dashboard security. Allow access to dashboard and CustomReportSchedule. */
  SecurityIdMileageSummaryDashboardId = "SecurityIdMileageSummaryDashboardId",
  /** Gets the securityId, Allow access to create or download accident keys. */
  SecurityIdAccidentWizardId = "SecurityIdAccidentWizardId",
  /** Gets the securityId, Allow access to the Fuel Tax Report. */
  SecurityIdFuelTaxId = "SecurityIdFuelTaxId",
  /** Gets the securityId, Allow access to managing report templates. */
  SecurityIdManageReportTemplatesId = "SecurityIdManageReportTemplatesId",
  /** Gets the securityId, Allow viewing data using report template. */
  SecurityIdViewReportTemplateId = "SecurityIdViewReportTemplateId",
  /** Gets the securityId, Access to ExportFromOtherDatabase. */
  SecurityIdExportFromOtherDatabaseId = "SecurityIdExportFromOtherDatabaseId",
  /** Gets the securityId, Allow viewing sent and received GPS Text Messages. */
  SecurityIdViewGpsTextMessageId = "SecurityIdViewGpsTextMessageId",
  /** Gets the securityId, Allow sending GPS Text Message, Routes and Addresses.s */
  SecurityIdSendGpsTextMessageId = "SecurityIdSendGpsTextMessageId",
  /** Gets the securityId, Allow deleting GPS Text Message. */
  SecurityIdDeleteGpsTextMessageId = "SecurityIdDeleteGpsTextMessageId",
  /** Gets the securityId, Requests the current GPS location from a GO device. Typical implementation is for Iridium network. */
  SecurityIdRequestDeviceLocationId = "SecurityIdRequestDeviceLocationId",
  /** Gets the securityId, Display devices on a map. */
  SecurityIdDisplayMapId = "SecurityIdDisplayMapId",
  /** Gets the securityId, Allow starting full version of MyGeotab from a web page. */
  SecurityIdStartFullVersionId = "SecurityIdStartFullVersionId",
  /** Gets the securityId, Allow changing exception email templates. */
  SecurityIdEditNotificationEmailTemplateId = "SecurityIdEditNotificationEmailTemplateId",
  /** Gets the securityId, Allow user to see advanced device settings. */
  SecurityIdDeviceAdminAdvancedId = "SecurityIdDeviceAdminAdvancedId",
  /** Gets the securityId, Allow use to configure driver feedback settings. */
  SecurityIdDeviceAdminDriverFeedbackId = "SecurityIdDeviceAdminDriverFeedbackId",
  /** Gets the securityId, Allow user to edit the odometer reading associated with the device. */
  SecurityIdEditDeviceOdometerId = "SecurityIdEditDeviceOdometerId",
  /** Gets the securityId, Allow external relay instruction to be send to the vehicle. */
  SecurityIdSendExternalRelayInstructionId = "SecurityIdSendExternalRelayInstructionId",
  /** Gets the securityId, Allow viewing the about checkmate page. */
  SecurityIdAboutCheckmateId = "SecurityIdAboutCheckmateId",
  /** Gets the securityId, Access to Fuel Usage Report. */
  SecurityIdFuelUsageReportId = "SecurityIdFuelUsageReportId",
  /**
   * Gets the securityId, required to support ENGCO and is only applicable if their custom
   *  code has been configured.
   *  Allow user to configure driver blacklist on devices.
   */
  SecurityIdDriverBlacklistId = "SecurityIdDriverBlacklistId",
  /** Gets the securityId, Allow user to edit an exception rule using the wizard. */
  SecurityIdEditExceptionId = "SecurityIdEditExceptionId",
  /** Gets the securityId, Allow user to edit a distribution list. */
  SecurityIdEditDistributionListId = "SecurityIdEditDistributionListId",
  /** Gets the securityId, Allow user to run Route Comparison Report. */
  SecurityIdRouteComparisonReportId = "SecurityIdRouteComparisonReportId",
  /** Gets the securityId, Allow user to edit HOS driver logs. */
  SecurityIdManageHOSLogsId = "SecurityIdManageHOSLogsId",
  /** Gets the securityId, Allow user to view HOS driver logs. */
  SecurityIdViewHOSLogsId = "SecurityIdViewHOSLogsId",
  /** Gets the securityId, Allow user to view DVIR logs. */
  SecurityIdViewDVIRLogsId = "SecurityIdViewDVIRLogsId",
  /** Gets the securityId, Allow user to edit DVIR logs. */
  SecurityIdManageDVIRLogsId = "SecurityIdManageDVIRLogsId",
  /** Gets the securityId, Allow user to view existing trailers. */
  SecurityIdViewTrailersId = "SecurityIdViewTrailersId",
  /** Gets the securityId, All user to add/edit/remove trailers. */
  SecurityIdManageTrailersId = "SecurityIdManageTrailersId",
  /** Gets the securityId, Allow user to view existing shipments. */
  SecurityIdViewShipmentsId = "SecurityIdViewShipmentsId",
  /** Gets the securityId, Allow user to add, edit, and remove shipments. */
  SecurityIdManageShipmentsId = "SecurityIdManageShipmentsId",
  /** Gets the securityId, Allow user to view the advanced help items. */
  SecurityIdViewAdvancedHelpId = "SecurityIdViewAdvancedHelpId",
  /** Gets the securityId, Allow user to edit OSM road speeds. */
  SecurityIdEditRoadSpeedsId = "SecurityIdEditRoadSpeedsId",
  /** Gets the securityId, Access to FuelTransactionList. */
  SecurityIdFuelTransactionListId = "SecurityIdFuelTransactionListId",
  /** Gets the securityId, Access to FuelTransactionAdmin. */
  SecurityIdFuelTransactionAdminId = "SecurityIdFuelTransactionAdminId",
  /** Gets the securityId, Allow user to see paid Marketplace items. */
  SecurityIdViewMarketplacePaidItemsId = "SecurityIdViewMarketplacePaidItemsId",
  /** Gets the securityId, Allow user to view certificates. */
  SecurityIdViewCertificatesId = "SecurityIdViewCertificatesId",
  /** Gets the securityId, Allow user to manage certificates. */
  SecurityIdManageCertificatesId = "SecurityIdManageCertificatesId",
  /** Gets the securityId, Access to repair DVIR. */
  SecurityIdRepairDVIRId = "SecurityIdRepairDVIRId",
  /** Gets the securityId, Allow user to purchase paid items on the Marketplace. */
  SecurityIdPurchaseMarketplacePaidItemsId = "SecurityIdPurchaseMarketplacePaidItemsId",
  /** Gets the securityId, Allow user to add, edit, or remove AddInData objects. */
  SecurityIdManageAddInDataId = "SecurityIdManageAddInDataId",
  /** Gets the securityId, Allow user to view AddInData objects. */
  SecurityIdViewAddInDataId = "SecurityIdViewAddInDataId",
  /** Gets the securityId, Allow user to view BinaryData. */
  SecurityIdViewBinaryDataId = "SecurityIdViewBinaryDataId",
  /** Gets the securityId, Allow user to view driver identification (keys). */
  SecurityIdDriverIdentificationClearanceId = "SecurityIdDriverIdentificationClearanceId",
  /** Gets the securityId, Allow user to view and edit accelerometer stock rules and device settings. */
  SecurityIdAccelerometerDataClearanceId = "SecurityIdAccelerometerDataClearanceId",
  /** Gets the securityId, Allow user to view device service plans. */
  SecurityIdServicePlansClearanceId = "SecurityIdServicePlansClearanceId",
  /** Gets the securityId, Allow user to view auxiliary settings. */
  SecurityIdAuxiliaryClearanceId = "SecurityIdAuxiliaryClearanceId",
  /** Gets the securityId, Allow user to view and edit engine status stock rules. */
  SecurityIdEngineStatusDataClearanceId = "SecurityIdEngineStatusDataClearanceId",
  /** Gets the securityId, Allow user to view reseller data. */
  SecurityIdResellerControlClearanceId = "SecurityIdResellerControlClearanceId",
  /** Gets the securityId, Allow user to view GoTalk settings and version. */
  SecurityIdGoTalkClearanceId = "SecurityIdGoTalkClearanceId",
  /** Gets the securityId, Allow user to view and edit status groups. */
  SecurityIdStatusGroupsClearanceId = "SecurityIdStatusGroupsClearanceId",
  /** Gets the securityId, Allow user to view product guide. */
  SecurityIdProductGuideClearanceId = "SecurityIdProductGuideClearanceId",
  /** Gets the securityId, Allow user to view feature preview switcher. */
  SecurityIdFeaturePreviewClearanceId = "SecurityIdFeaturePreviewClearanceId",
  /** Gets the securityId, Allow user to view news notifications switcher. */
  SecurityIdNewsNotificationsClearanceId = "SecurityIdNewsNotificationsClearanceId",
  /** Gets the securityId, Allow user to view and edit addins. */
  SecurityIdManageAddinsClearanceId = "SecurityIdManageAddinsClearanceId",
  /** Gets the securityId, Allow user to view device current status link. */
  SecurityIdDeviceCurrentStatusClearanceId = "SecurityIdDeviceCurrentStatusClearanceId",
  /** Gets the securityId, Allow user to view TripType Change Data. */
  SecurityIdViewTripTypeChangeDataId = "SecurityIdViewTripTypeChangeDataId",
  /** Gets the securityId, Allow user to view TripType Change Data. */
  SecurityIdViewDeviceDataPrivacyChangeDataId = "SecurityIdViewDeviceDataPrivacyChangeDataId",
  /** Gets the securityId, Allow user to view TripType Change Data. */
  SecurityIdEditDeviceDataPrivacyChangeDataId = "SecurityIdEditDeviceDataPrivacyChangeDataId",
  /** Gets the securityId, Allow user to view and edit TripType Change Data. */
  SecurityIdEditTripTypeChangeDataId = "SecurityIdEditTripTypeChangeDataId",
  /** Gets the securityId, Allow user to view and edit DirectSupport tickets. */
  SecurityIdDirectSupportAdminId = "SecurityIdDirectSupportAdminId",
  /** Gets the securityId, Allow user to view Business Intelligence data (Fleet Industry Trends and etc.) */
  SecurityIdViewBusinessIntelligenceId = "SecurityIdViewBusinessIntelligenceId",
  /** Gets the securityId, Allow user to view turn on/off Active tracking feature. */
  SecurityIdActiveTrackingClearanceId = "SecurityIdActiveTrackingClearanceId",
  /** Gets the securityId, Allow user to view turn on/off continuous connect feature. */
  SecurityIdContinuousConnectClearanceId = "SecurityIdContinuousConnectClearanceId",
  /** Gets the securityId, Access to certify DVIR. */
  SecurityIdCertifyDVIRId = "SecurityIdCertifyDVIRId",
  /** Gets the securityId, Access to inspect DVIR. */
  SecurityIdInspectDVIRId = "SecurityIdInspectDVIRId",
  /** Gets the securityId, Allow user to view media files. */
  SecurityIdViewMediaId = "SecurityIdViewMediaId",
  /** Gets the securityId, Allow user to add, set or remove media files. */
  SecurityIdManageMediaId = "SecurityIdManageMediaId",
  /** Gets the securityId, Allow user only to view groups. */
  SecurityIdViewGroupsId = "SecurityIdViewGroupsId",
  /** Gets the securityId, Allow user to view the wifi settings tab and view/modify the wifi hotspot SSID and password. */
  SecurityIdAdministerWiFiHotspotSettingsId = "SecurityIdAdministerWiFiHotspotSettingsId",
  /** Gets the securityId, Allow user to view the wifi hotspot SSID and password. */
  SecurityIdViewWiFiHotspotSettingsId = "SecurityIdViewWiFiHotspotSettingsId",
  /** Gets the securityId, Access to Material Management. */
  SecurityIdMaterialManagementReportId = "SecurityIdMaterialManagementReportId",
  /** Gets the securityId, view deviceShare. */
  SecurityIdViewDeviceShareId = "SecurityIdViewDeviceShareId",
  /** Gets the securityId, edit device share. */
  SecurityIdEditDeviceShareId = "SecurityIdEditDeviceShareId",
  /** Gets the securityId for InstallRecord. */
  SecurityIdInstallRecordId = "SecurityIdInstallRecordId",
  /** Gets the "All Rules" option for Reprocess Requests. */
  AllRulesIdReprocessRequest = "AllRulesIdReprocessRequest",
  /** Gets the securityId, view user device link. */
  SecurityIdViewUserDeviceLinkId = "SecurityIdViewUserDeviceLinkId",
  /** Gets the securityId, edit device link. */
  SecurityIdEditUserDeviceLinkId = "SecurityIdEditUserDeviceLinkId",
  /** Gets the securityId, Access to Route Completion. */
  SecurityIdRouteCompletionId = "SecurityIdRouteCompletionReportId",
  /** Gets the securityId, Access to Active Insights. */
  SecurityIdViewActiveInsightsId = "SecurityIdViewActiveInsightsId",
  /** Gets the securityId, Access to Route Completion. */
  SecurityIdViewAnalyticsLabId = "SecurityIdViewAnalyticsLabId",
  /** Gets the securityId, Access to Route Completion. */
  SecurityIdViewShareableLinkId = "SecurityIdViewShareableLinkId",
  /** Gets the securityId, Access to Route Completion. */
  SecurityIdCreateShareableLinkId = "SecurityIdCreateShareableLinkId",
  /** Gets the securityId, Access to Route Completion. */
  SecurityIdDeleteShareableLinkId = "SecurityIdDeleteShareableLinkId",
  /** Gets the diagnostic "Generic incremental distance (based on engine road speed)". */
  DiagnosticGenericIncrementalDistanceId = "DiagnosticGenericIncrementalDistanceId)",
  /** Gets the securityId, Allowed to Ignore HOS logs. */
  SecurityIdIgnoreHOSLogsId = "SecurityIdIgnoreHOSLogsId",
  /** Gets the securityId, Access to administer property sets. */
  SecurityIdAdministerPropertySetId = "SecurityIdAdministerPropertySetId",
  /** Gets the securityId, Access to view property sets. */
  SecurityIdViewPropertySetId = "SecurityIdViewPropertySetId",
  /** Gets the securityId, Access to administer properties. */
  SecurityIdAdministerPropertyId = "SecurityIdAdministerPropertyId",
  /** Gets the securityId, Access to view properties. */
  SecurityIdViewPropertyId = "SecurityIdViewPropertyId",
  /** Gets the Levc Source KnownId. */
  SourceLevcId = "SourceLevcId",
  /** Gets the Obsolete Levc Source KnownId. */
  SourceLevcObsoleteId = "SourceLevcObsoleteId",
  /** Gets the Levc Any Controller KnownId. */
  ControllerLevcAnyId = "ControllerLevcAnyId",
  /** Gets the security ID that allows a user to add comments or attachments to any ExceptionEvent in their scope. */
  SecurityIdExceptionEventReviewerId = "SecurityIdExceptionEventReviewerId",
  /** Gets the security ID that allows a user to add comments or attachments to ExceptionEvents that they are a driver of. */
  SecurityIdExceptionEventReviewParticipantId = "SecurityIdExceptionEventReviewParticipantId",
  /** Gets the securityId, Allowed to share device location. */
  SecurityIdViewSharedDeviceId = "SecurityIdViewSharedDeviceId",
  /** Gets the securityId, Allowed to edit device groups. */
  SecurityIdManageDriverActivityGroupId = "SecurityIdManageDriverActivityGroupId",
  /** Gets the securityId which allows viewing {@link TripAnnotation}s. */
  SecurityIdViewTripAnnotationId = "SecurityIdViewTripAnnotationId",
  /** Gets the securityId which allows editing {@link TripAnnotation}s. */
  SecurityIdManageTripAnnotationId = "SecurityIdManageTripAnnotationId",
  /** Gets the securityId, insert UserDisplayProfile. */
  SecurityIdUserDisplayProfileInsertId = "SecurityIdUserDisplayProfileInsertId",
  /** Gets the securityId, insert DisplayMeasurementProfile. */
  SecurityIdDisplayMeasurementProfileInsertId = "SecurityIdDisplayMeasurementProfileInsertId",
  /** Gets the securityId, insert DisplayMeasurementProfileDetail. */
  SecurityIdDisplayMeasurementProfileDetailInsertId = "SecurityIdDisplayMeasurementProfileDetailInsertId",
  /** Gets the securityId, set UserDisplayProfile. */
  SecurityIdUserDisplayProfileSetId = "SecurityIdUserDisplayProfileSetId",
  /** Gets the securityId, set DisplayMeasurementProfile. */
  SecurityIdDisplayMeasurementProfileSetId = "SecurityIdDisplayMeasurementProfileSetId",
  /** Gets the securityId, set DisplayMeasurementProfileDetail. */
  SecurityIdDisplayMeasurementProfileDetailSetId = "SecurityIdDisplayMeasurementProfileDetailSetId",
  /** Gets the securityId, remove UserDisplayProfile. */
  SecurityIdUserDisplayProfileRemoveId = "SecurityIdUserDisplayProfileRemoveId",
  /** Gets the securityId, remove DisplayMeasurementProfile. */
  SecurityIdDisplayMeasurementProfileRemoveId = "SecurityIdDisplayMeasurementProfileRemoveId",
  /** Gets the securityId, remove DisplayMeasurementProfileDetail. */
  SecurityIdDisplayMeasurementProfileDetailRemoveId = "SecurityIdUserDisplayProfileDetailRemoveId",
  /** Gets ADDON_INVENTURE_ZONE_1_RETURN_TEMP diagnostic Id. */
  AddonInventureZone1ReturnTemp = "AddonInventureZone1ReturnTemp",
  /** Gets ADDON_INVENTURE_ZONE_2_RETURN_TEMP diagnostic Id. */
  AddonInventureZone2ReturnTemp = "AddonInventureZone2ReturnTemp",
  /** Gets ADDON_INVENTURE_ZONE_3_RETURN_TEMP diagnostic Id. */
  AddonInventureZone3ReturnTemp = "AddonInventureZone3ReturnTemp",
  /** Gets Remote probe 1 temperature diagnostic Id. */
  RemoteProbe1TemperatureId = "RemoteProbe1TemperatureId",
  /** Gets Remote probe 2 temperature diagnostic Id. */
  RemoteProbe2TemperatureId = "RemoteProbe2TemperatureId",
  /** Gets Remote probe 3 temperature diagnostic Id. */
  RemoteProbe3TemperatureId = "RemoteProbe3TemperatureId",
  /** Gets Remote probe 4 temperature diagnostic Id. */
  RemoteProbe4TemperatureId = "RemoteProbe4TemperatureId",
  /** Gets the Refrigeration unit status (1 = present). */
  RefrigerationUnitStatusId = "RefrigerationUnitStatusId",
  /** Gets the Refrigeration unit - return temperature zone 1 Id. */
  RefrigerationUnitTemperatureZone1Id = "RefrigerationUnitTemperatureZone1Id",
  /** Gets the Refrigeration unit - discharge temperature zone 1 Id. */
  RefrigerationUnitDischargeTemperatureZone1Id = "RefrigerationUnitDischargeTemperatureZone1Id",
  /** Gets the Refrigeration unit - evaporator coil temperature zone 1 Id. */
  RefrigerationUnitEvaporatorCoilTemperatureZone1Id = "RefrigerationUnitEvaporatorCoilTemperatureZone1Id",
  /** Gets the Refrigeration unit - set temperature zone 1 Id. */
  RefrigerationUnitSetTemperatureZone1Id = "RefrigerationUnitSetTemperatureZone1Id",
  /** Gets the Refrigeration unit - return temperature zone 2 Id. */
  RefrigerationUnitTemperatureZone2Id = "RefrigerationUnitTemperatureZone2Id",
  /** Gets the Refrigeration unit - discharge temperature zone 2 Id. */
  RefrigerationUnitDischargeTemperatureZone2Id = "RefrigerationUnitDischargeTemperatureZone2Id",
  /** Gets the Refrigeration unit - evaporator Coil temperature zone 2 Id. */
  RefrigerationUnitEvaporatorCoilTemperatureZone2Id = "RefrigerationUnitEvaporatorCoilTemperatureZone2Id",
  /** Gets the Refrigeration unit - set temperature zone 2 Id. */
  RefrigerationUnitSetTemperatureZone2Id = "RefrigerationUnitSetTemperatureZone2Id",
  /** Gets the Refrigeration unit - return temperature zone 3 Id. */
  RefrigerationUnitTemperatureZone3Id = "RefrigerationUnitTemperatureZone3Id",
  /** Gets the Refrigeration unit - discharge temperature zone 3 Id. */
  RefrigerationUnitDischargeTemperatureZone3Id = "RefrigerationUnitDischargeTemperatureZone3Id",
  /** Gets the Refrigeration unit - evaporator Coil temperature zone 3 Id. */
  RefrigerationUnitEvaporatorCoilTemperatureZone3Id = "RefrigerationUnitEvaporatorCoilTemperatureZone3Id",
  /** Gets the Refrigeration unit - set temperature zone 3 Id. */
  RefrigerationUnitSetTemperatureZone3Id = "RefrigerationUnitSetTemperatureZone3Id",
  /** Gets the Refrigeration unit - external Ambient Temperature Id. */
  RefrigerationUnitExternalAmbientTemperatureId = "RefrigerationUnitExternalAmbientTemperatureId",
  /** Gets the Refrigeration unit - fuel level Id. */
  RefrigerationUnitFuelLevelId = "RefrigerationUnitFuelLevelId",
  /** Gets the Refrigeration unit - engine Speed Id. */
  RefrigerationUnitEngineSpeedId = "RefrigerationUnitEngineSpeedId",
  /** Gets the Refrigeration unit - engine coolant temperature Id. */
  RefrigerationUnitEngineCoolantTemperatureId = "RefrigerationUnitEngineCoolantTemperatureId",
  /** Gets the Refrigeration unit - operating mode Id (0 = manual / 1 = auto) . */
  RefrigerationUnitOperationModeId = "RefrigerationUnitOperationModeId",
  /** Gets the Refrigeration unit - engine mode Id (0 = diesel / 1 = electric). */
  RefrigerationUnitEngineModeId = "RefrigerationUnitEngineModeId",
  /** Gets the Refrigeration unit - door status Id (0 = shut / 1 = open). */
  RefrigerationUnitDoorStatusId = "RefrigerationUnitDoorStatusId",
  /** Gets the Refrigeration unit - battery voltage Id. */
  RefrigerationUnitBatteryVoltageId = "RefrigerationUnitBatteryVoltageId",
  /** Gets the Refrigeration unit - total run hours for all energy type Id. */
  RefrigerationUnitTotalRunHoursEnergyTypeId = "RefrigerationUnitTotalRunHoursEnergyTypeId",
  /** Gets the Refrigeration unit - engine hours (diesel) Id. */
  RefrigerationUnitEngineHoursDieselId = "RefrigerationUnitEngineHoursDieselId",
  /** Gets the Refrigeration unit - engine hours (electric) Id. */
  RefrigerationUnitEngineHoursElectricId = "RefrigerationUnitEngineHoursElectricId",
  /** Gets the Refrigeration unit - Total number of alarms Id. */
  RefrigerationUnitTotalNumberAlarmsId = "RefrigerationUnitTotalNumberAlarmsId",
  /** Gets the Thermograph status Id (0 = absent / 1 = present). */
  ThermographStatusId = "ThermographStatusId",
  /** Gets the Thermograph temperature 1 Id. */
  ThermographTemperature1Id = "ThermographTemperature1Id",
  /** Gets the Thermograph temperature 2 Id. */
  ThermographTemperature2Id = "ThermographTemperature2Id",
  /** Gets the Thermograph temperature 3 Id. */
  ThermographTemperature3Id = "ThermographTemperature3Id",
  /** Gets the Thermograph temperature 4 Id. */
  ThermographTemperature4Id = "ThermographTemperature4Id",
  /** Gets the Thermograph temperature 5 Id. */
  ThermographTemperature5Id = "ThermographTemperature5Id",
  /** Gets the Thermograph temperature 6 Id. */
  ThermographTemperature6Id = "ThermographTemperature6Id",
  /** Gets the securityId, get BinaryDataFile. */
  SecurityIdViewBinaryDataFilesId = "SecurityIdViewBinaryDataFilesId",
  /** Gets the securityId, add, set, or remove BinaryDataFile */
  SecurityIdManageBinaryDataFilesId = "SecurityIdManageBinaryDataFilesId",
  /** Gets the securityId, add, set, or remove GroupFilter */
  SecurityIdModifyGroupFilterId = "SecurityIdModifyGroupFilterId",
  /** Gets the securityId, see GroupFilter */
  SecurityIdViewGroupFilterId = "SecurityIdViewGroupFilterId",
  /** Gets the securityId, Access to EV Battery Health Report. */
  SecurityIdEVBatteryHealthReportId = "SecurityIdEVBatteryHealthReportId",
  /** Gets the MediaFile SolutionId associated with display pictures. */
  DisplayPictureSolutionId = "DisplayPictureSolutionId",
  /** Gets the securityId, administer Live Map */
  SecurityIdAdministerLiveMapId = "SecurityIdAdministerLiveMapId",
  /** Gets the securityId, view Live Map */
  SecurityIdViewLiveMapId = "SecurityIdViewLiveMapId",
  /** Gets the securityId, Manage Tachograph Inspection */
  SecurityIdManageTachographInspectionId = "SecurityIdManageTachographInspectionId",
  /** Gets the securityId, View Tachograph Inspection */
  SecurityIdViewTachographInspectionId = "SecurityIdViewTachographInspectionId",
  /** Gets the securityId, manage TachographCompanyCard */
  SecurityIdManageTachographCompanyCardsId = "SecurityIdManageTachographCompanyCardsId",
  /** Gets the securityId, view TachographCompanyCard */
  SecurityIdViewTachographCompanyCardsId = "SecurityIdViewTachographCompanyCardsId",
  /** Gets the securityId, tachograph download and upload files */
  SecurityIdTachographDownloadAndUploadFilesId = "SecurityIdTachographDownloadAndUploadFilesId",
  /** Gets the securityId, view tachograph remote download data */
  SecurityIdViewTachographRemoteDownloadDataId = "SecurityIdViewTachographRemoteDownloadDataId",
  /** Gets the securityId, view tachograph driving time data */
  SecurityIdViewTachographDrivingTimeDataId = "SecurityIdViewTachographDrivingTimeDataId",
  /** Gets the securityId, view tachograph infringement data */
  SecurityIdViewTachographInfringementDataId = "SecurityIdViewTachographInfringementDataId",
  /** Gets the securityId, Send cold chain command */
  SecurityIdSendColdChainCommandId = "SecurityIdSendColdChainCommandId",
  /** Gets the securityId, Edit stock rule */
  SecurityIdEditStockRulesId = "SecurityIdEditStockRulesId",
  /** Gets the securityId, Reset password. */
  SecurityIdResetPasswordId = "SecurityIdResetPasswordId",
  /** Gets the controller aerodynamic control identifier. */
  ControllerAerodynamicControlId = "ControllerAerodynamicControlId",
  /** Gets the controller aerodynamic control unit identifier. */
  ControllerAerodynamicControlUnitId = "ControllerAerodynamicControlUnitId",
  /** Gets the controller aftertreatment system gas intake identifier. */
  ControllerAftertreatmentSystemGasIntakeId = "ControllerAftertreatmentSystemGasIntakeId",
  /** Gets the controller aftertreatment system gas outlet identifier. */
  ControllerAftertreatmentSystemGasOutletId = "ControllerAftertreatmentSystemGasOutletId",
  /** Gets the controller alternator electrical charging system identifier. */
  ControllerAlternatorElectricalChargingSystemId = "ControllerAlternatorElectricalChargingSystemId",
  /** Gets the controller auxiliary heater no1 identifier. */
  ControllerAuxiliaryHeaterNo1Id = "ControllerAuxiliaryHeaterNo1Id",
  /** Gets the controller auxiliary heater no2 identifier. */
  ControllerAuxiliaryHeaterNo2Id = "ControllerAuxiliaryHeaterNo2Id",
  /** Gets the controller auxiliary valve control identifier. */
  ControllerAuxiliaryValveControlId = "ControllerAuxiliaryValveControlId",
  /** Gets the controller axle drive no1 identifier. */
  ControllerAxleDriveNo1Id = "ControllerAxleDriveNo1Id",
  /** Gets the controller axle drive no2 identifier. */
  ControllerAxleDriveNo2Id = "ControllerAxleDriveNo2Id",
  /** Gets the controller axle power unit identifier. */
  ControllerAxlePowerUnitId = "ControllerAxlePowerUnitId",
  /** Gets the controller axle steering identifier. */
  ControllerAxleSteeringId = "ControllerAxleSteeringId",
  /** Gets the controller axle trailer identifier. */
  ControllerAxleTrailerId = "ControllerAxleTrailerId",
  /** Gets the controller body controller identifier. */
  ControllerBodyControllerId = "ControllerBodyControllerId",
  /** Gets the controller brakes drive axle no1 identifier. */
  ControllerBrakesDriveAxleNo1Id = "ControllerBrakesDriveAxleNo1Id",
  /** Gets the controller brakes drive axle no2 identifier. */
  ControllerBrakesDriveAxleNo2Id = "ControllerBrakesDriveAxleNo2Id",
  /** Gets the controller brakes power unit identifier. */
  ControllerBrakesPowerUnitId = "ControllerBrakesPowerUnitId",
  /** Gets the controller brakes steer axle identifier. */
  ControllerBrakesSteerAxleId = "ControllerBrakesSteerAxleId",
  /** Gets the controller brakes system controller identifier. */
  ControllerBrakesSystemControllerId = "ControllerBrakesSystemControllerId",
  /** Gets the controller brakes trailer no1 identifier. */
  ControllerBrakesTrailerNo1Id = "ControllerBrakesTrailerNo1Id",
  /** Gets the controller brakes trailer no2 identifier. */
  ControllerBrakesTrailerNo2Id = "ControllerBrakesTrailerNo2Id",
  /** Gets the controller brakes trailer no3 identifier. */
  ControllerBrakesTrailerNo3Id = "ControllerBrakesTrailerNo3Id",
  /** Gets the controller CAB climate control identifier. */
  ControllerCabClimateControlId = "ControllerCabClimateControlId",
  /** Gets the controller CAB controller primary identifier. */
  ControllerCabControllerPrimaryId = "ControllerCabControllerPrimaryId",
  /** Gets the controller CAB controller secondary identifier. */
  ControllerCabControllerSecondaryId = "ControllerCabControllerSecondaryId",
  /** Gets the controller CAB display no1 identifier. */
  ControllerCabDisplayNo1Id = "ControllerCabDisplayNo1Id",
  /** Gets the controller CAB display no2 identifier. */
  ControllerCabDisplayNo2Id = "ControllerCabDisplayNo2Id",
  /** Gets the controller cargo refrigeration heating trailer identifier. */
  ControllerCargoRefrigerationHeatingTrailerId = "ControllerCargoRefrigerationHeatingTrailerId",
  /** Gets the controller chassis controller no1 identifier. */
  ControllerChassisControllerNo1Id = "ControllerChassisControllerNo1Id",
  /** Gets the controller chassis controller no2 identifier. */
  ControllerChassisControllerNo2Id = "ControllerChassisControllerNo2Id",
  /** Gets the controller clutch converter unit identifier. */
  ControllerClutchConverterUnitId = "ControllerClutchConverterUnitId",
  /** Gets the controller communications unit cellular identifier. */
  ControllerCommunicationsUnitCellularId = "ControllerCommunicationsUnitCellularId",
  /** Gets the controller communications unit radio identifier. */
  ControllerCommunicationsUnitRadioId = "ControllerCommunicationsUnitRadioId",
  /** Gets the controller communications unit satellite identifier. */
  ControllerCommunicationsUnitSatelliteId = "ControllerCommunicationsUnitSatelliteId",
  /** Gets the controller communication unit ground identifier. */
  ControllerCommunicationUnitGroundId = "ControllerCommunicationUnitGroundId",
  /** Gets the controller communication unit satellite identifier. */
  ControllerCommunicationUnitSatelliteId = "ControllerCommunicationUnitSatelliteId",
  /** Gets the controller cranking starting system identifier. */
  ControllerCrankingStartingSystemId = "ControllerCrankingStartingSystemId",
  /** Gets the controller data logging computer identifier. */
  ControllerDataLoggingComputerId = "ControllerDataLoggingComputerId",
  /** Gets the geotab ai model controller identifier. */
  ControllerDefaultGeotabAiModelId = "ControllerDefaultGeotabAiModelId",
  /** Gets the controller diagnostic systems power unit identifier. */
  ControllerDiagnosticSystemsPowerUnitId = "ControllerDiagnosticSystemsPowerUnitId",
  /** Gets the controller diagnostic systems trailer identifier. */
  ControllerDiagnosticSystemsTrailerId = "ControllerDiagnosticSystemsTrailerId",
  /** Gets the controller driver information center no1 identifier. */
  ControllerDriverInformationCenterNo1Id = "ControllerDriverInformationCenterNo1Id",
  /** Gets the controller electrical charging system identifier. */
  ControllerElectricalChargingSystemId = "ControllerElectricalChargingSystemId",
  /** Gets the controller electrical identifier. */
  ControllerElectricalId = "ControllerElectricalId",
  /** Gets the controller electrical system identifier. */
  ControllerElectricalSystemId = "ControllerElectricalSystemId",
  /** Gets the controller endurance braking system identifier. */
  ControllerEnduranceBrakingSystemId = "ControllerEnduranceBrakingSystemId",
  /** Gets the controller engine no2 identifier. */
  ControllerEngineNo2Id = "ControllerEngineNo2Id",
  /** Gets the controller engine no3 identifier. */
  ControllerEngineNo3Id = "ControllerEngineNo3Id",
  /** Gets the controller engine retarder identifier. */
  ControllerEngineRetarderId = "ControllerEngineRetarderId",
  /** Gets the controller engine valve controller identifier. */
  ControllerEngineValveControllerId = "ControllerEngineValveControllerId",
  /** Gets the controller exhaust emission controller identifier. */
  ControllerExhaustEmissionControllerId = "ControllerExhaustEmissionControllerId",
  /** Gets the controller fan drive controller identifier. */
  ControllerFanDriveControllerId = "ControllerFanDriveControllerId",
  /** Gets the geotab ai model controller identifier. */
  ControllerGeotabAiModelFaultId = "ControllerGeotabAiModelFaultId",
  /** Gets the identifier for the fixed controller assigned to the GO device. */
  ControllerGoDeviceId = "ControllerGoDeviceId",
  /** Gets the controller headway controller identifier. */
  ControllerHeadwayControllerId = "ControllerHeadwayControllerId",
  /** Gets the controller hitch control identifier. */
  ControllerHitchControlId = "ControllerHitchControlId",
  /** Gets the controller hydraulic pump controller identifier. */
  ControllerHydraulicPumpControllerId = "ControllerHydraulicPumpControllerId",
  /** Gets the controller ignition control module no1 identifier. */
  ControllerIgnitionControlModuleNo1Id = "ControllerIgnitionControlModuleNo1Id",
  /** Gets the controller ignition control module no2 identifier. */
  ControllerIgnitionControlModuleNo2Id = "ControllerIgnitionControlModuleNo2Id",
  /** Gets the controller information system controller no1 identifier. */
  ControllerInformationSystemControllerNo1Id = "ControllerInformationSystemControllerNo1Id",
  /** Gets the controller instrument cluster identifier. */
  ControllerInstrumentClusterId = "ControllerInstrumentClusterId",
  /** Gets the controller instrument cluster no1 identifier. */
  ControllerInstrumentClusterNo1Id = "ControllerInstrumentClusterNo1Id",
  /** Gets the controller J1708 cruise control identifier. */
  ControllerJ1708CruiseControlId = "ControllerJ1708CruiseControlId",
  /** Gets the controller J1708 engine identifier. */
  ControllerJ1708EngineId = "ControllerJ1708EngineId",
  /** Gets the controller J1708 fuel system identifier. */
  ControllerJ1708FuelSystemId = "ControllerJ1708FuelSystemId",
  /** Gets the controller J1708 pneumatic system controller identifier. */
  ControllerJ1708PneumaticSystemControllerId = "ControllerJ1708PneumaticSystemControllerId",
  /** Gets the controller J1708 power takeoff identifier. */
  ControllerJ1708PowerTakeoffId = "ControllerJ1708PowerTakeoffId",
  /** Gets the controller J1708 trip recorder identifier. */
  ControllerJ1708TripRecorderId = "ControllerJ1708TripRecorderId",
  /** Gets the controller J1708 turbocharger identifier. */
  ControllerJ1708TurbochargerId = "ControllerJ1708TurbochargerId",
  /** Gets the controller J1708 vehicle security identifier. */
  ControllerJ1708VehicleSecurityId = "ControllerJ1708VehicleSecurityId",
  /** Gets the controller J1939 cruise control identifier. */
  ControllerJ1939CruiseControlId = "ControllerJ1939CruiseControlId",
  /** Gets the controller J1939 engine no1 identifier. */
  ControllerJ1939EngineNo1Id = "ControllerJ1939EngineNo1Id",
  /** Gets the controller J1939 engine no2 identifier. */
  ControllerJ1939EngineNo2Id = "ControllerJ1939EngineNo2Id",
  /** Gets the controller J1939 fuel system identifier. */
  ControllerJ1939FuelSystemId = "ControllerJ1939FuelSystemId",
  /** Gets the controller J1939 pneumatic system controller identifier. */
  ControllerJ1939PneumaticSystemControllerId = "ControllerJ1939PneumaticSystemControllerId",
  /** Gets the controller J1939 power take off main rear identifier. */
  ControllerJ1939PowerTakeOffMainRearId = "ControllerJ1939PowerTakeOffMainRearId",
  /** Gets the controller J1939 trip recorder identifier. */
  ControllerJ1939TripRecorderId = "ControllerJ1939TripRecorderId",
  /** Gets the controller J1939 turbocharger identifier. */
  ControllerJ1939TurbochargerId = "ControllerJ1939TurbochargerId",
  /** Gets the controller J1939 vehicle security identifier. */
  ControllerJ1939VehicleSecurityId = "ControllerJ1939VehicleSecurityId",
  /** Gets the controller lighting operator controls identifier. */
  ControllerLightingOperatorControlsId = "ControllerLightingOperatorControlsId",
  /** Gets the controller management computer no1 identifier. */
  ControllerManagementComputerNo1Id = "ControllerManagementComputerNo1Id",
  /** Gets the controller multiplex identifier. */
  ControllerMultiplexId = "ControllerMultiplexId",
  /** Gets the controller none identifier. */
  ControllerNoneId = "ControllerNoneId",
  /** Gets the controller OBD body identifier. */
  ControllerObdBodyId = "ControllerObdBodyId",
  /** Gets the controller OBD chassis identifier. */
  ControllerObdChassisId = "ControllerObdChassisId",
  /** Gets the controller OBD networking identifier. */
  ControllerObdNetworkingId = "ControllerObdNetworkingId",
  /** Gets the controller OBD powertrain identifier. */
  ControllerObdPowertrainId = "ControllerObdPowertrainId",
  /** Gets the controller WWH OBD body identifier. */
  ControllerObdWwhBodyId = "ControllerObdWwhBodyId",
  /** Gets the controller WWH OBD chassis identifier. */
  ControllerObdWwhChassisId = "ControllerObdWwhChassisId",
  /** Gets the controller WWH OBD networking identifier. */
  ControllerObdWwhNetworkingId = "ControllerObdWwhNetworkingId",
  /** Gets the controller WWH OBD powertrain identifier. */
  ControllerObdWwhPowertrainId = "ControllerObdWwhPowertrainId",
  /** Gets the controller off-board diagnostics no1 identifier. */
  ControllerOffboardDiagnosticsNo1Id = "ControllerOffboardDiagnosticsNo1Id",
  /** Gets the controller off-board diagnostics no2 identifier. */
  ControllerOffboardDiagnosticsNo2Id = "ControllerOffboardDiagnosticsNo2Id",
  /** Gets the controller off-board programming station identifier. */
  ControllerOffboardProgrammingStationId = "ControllerOffboardProgrammingStationId",
  /** Gets the controller off vehicle gateway identifier. */
  ControllerOffVehicleGatewayId = "ControllerOffVehicleGatewayId",
  /** Gets the controller oil sensor identifier. */
  ControllerOilSensorId = "ControllerOilSensorId",
  /** Gets the controller on board diagnostic unit identifier. */
  ControllerOnBoardDiagnosticUnitId = "ControllerOnBoardDiagnosticUnitId",
}
