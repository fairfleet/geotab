//     This code was generated by a Reinforced.Typings tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

import { Search } from "./Search";
import { GroupSearch } from "./GroupSearch";
import { HosRuleSet } from "../Settings/HosRuleSet";
import { UserAuthenticationType } from "./UserAuthenticationType";
import { GroupFilterCondition } from "./GroupFilterCondition";
import { UserSearchType } from "./UserSearchType";
import { DateTimeComparator } from "./DateTimeComparator";

/** The object used to specify the arguments when searching for a {@link User}/{@link Driver}. */
export interface UserSearch extends Search {
  /** Gets or sets search for Users who are associated with this {@link UserAuthenticationType}. */
  authenticationType: UserAuthenticationType;
  /** Gets or sets search for Users who are associated with these {@link UserAuthenticationType}s. */
  authenticationTypes: UserAuthenticationType[];
  /**
   * Gets or sets search for Users who are a member of this {@link GroupSearch}. Available GroupSearch options are:.
   *  <list><item><description>Id</description></item></list>
   *
   * @remarks Cannot be used with DriverGroups.
   */
  companyGroups: GroupSearch[];
  /** Gets or sets for Driver group list search. */
  driverGroupFilterCondition: GroupFilterCondition;
  /**
   * Gets or sets search for Users who are assigned a Driver Key which is a member of the {@link GroupSearch}. Available
   *  GroupSearch options are:.
   *  <list><item><description>Id</description></item></list>
   *
   * @remarks Cannot be used with CompanyGroups.
   */
  driverGroups: GroupSearch[];
  /**
   * Gets or sets search for a User who is associated with this Driver Employee Number. Wildcard can be used by prepending/appending "%"
   *  to string. Example "%EmployeeNumber%".
   *  This property is negatable. If the first character of this search property is '!', then the API will know to negate the
   *  search logic. (e.g. field = "!EmployeeNumber%", is equivalent to: WHERE NOT LIKE 'EmployeeNumber%')
   */
  employeeNumber: string;
  /**
   * Gets or sets search for Users with this first name. Wildcard can be used by prepending/appending "%"
   *  to string. Example "%firstName%".
   *  This property is negatable. If the first character of this search property is '!', then the API will know to negate the
   *  search logic. (e.g. field = "!John%", is equivalent to: WHERE NOT LIKE 'John%')
   */
  firstName: string;
  /**
   * Gets or sets search for Users that were active at this date or after. Set to UTC now to search for
   *  only currently active (non-archived) users.
   */
  fromDate: Date;
  /** Gets or sets search for Users who are associated with this {@link HosRuleSet}. */
  hosRuleSet: HosRuleSet;
  /** Gets or sets search for Users who are associated with these {@link HosRuleSet}s. */
  hosRuleSets: HosRuleSet[];
  /** Gets or sets only search for Users who have a Driver Key assigned. */
  isDriver: boolean;
  /** Gets or sets search for a User who is associated with this Driver Key Id. */
  keyId: number;
  /** Gets or sets search for entities that contain specific keywords in all wildcard string-searchable fields. */
  keywords: string[];
  /**
   * Gets or sets for LastLogin search. Must be used with LastLoginComparator.
   *  If user's {@link UserAuthenticationType} is 'MyAdmin' and LastLoginComparator is 'After', user is returned regardless of LastLogin criteria.
   *  If user's {@link UserAuthenticationType} is 'MyAdmin' and LastLoginComparator is 'Before', user is not returned regardless of LastLogin criteria.
   */
  lastLogin: Date;
  /** Gets or sets for {@link DateTimeComparator} for LastLogin search. */
  lastLoginComparator: DateTimeComparator;
  /**
   * Gets or sets search for Users with this last name. Wildcard can be used by prepending/appending "%"
   *  to string. Example "%lastName%".
   *  This property is negatable. If the first character of this search property is '!', then the API will know to negate the
   *  search logic. (e.g. field = "!John%", is equivalent to: WHERE NOT LIKE 'John%')
   */
  lastName: string;
  /**
   * Gets or sets search for a User who is associated with this Driver License Number. Wildcard can be used by prepending/appending "%"
   *  to string. Example "%LicenseNumber%".
   *  This property is negatable. If the first character of this search property is '!', then the API will know to negate the
   *  search logic. (e.g. field = "!LicenseNumber%", is equivalent to: WHERE NOT LIKE 'LicenseNumber%')
   */
  licenseNumber: string;
  /**
   * Gets or sets search for Users with this email/log-on name. Wildcard can be used by prepending/appending "%"
   *  to string. Example "%name%".
   *  This property is negatable. If the first character of this search property is '!', then the API will know to negate the
   *  search logic. (e.g. field = "!John%", is equivalent to: WHERE NOT LIKE 'John%')
   */
  name: string;
  /**
   * Gets or sets search for Users who are assigned to a specific Security Clearance which is a member of the {@link GroupSearch}. Available
   *  GroupSearch options are:.
   *  <list><item><description>Id</description></item></list>
   */
  securityGroups: GroupSearch[];
  /** Gets or sets search for a User who is associated with this Driver Serial Number. */
  serialNumber: string;
  /** Gets or sets search for Users that were active at this date or before. */
  toDate: Date;
  /** Gets or sets for user group list search. */
  userGroupFilterCondition: GroupFilterCondition;
  /** Gets or sets for {@link UserSearch.UserSearchType} search. */
  userSearchType: UserSearchType;
}
