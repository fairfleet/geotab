//     This code was generated by a Reinforced.Typings tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

import { EntityWithVersion } from "./EntityWithVersion";
import { AnnotationLog } from "./AnnotationLog";
import { User } from "./User";
import { AddressLookupData } from "./AddressLookupData";
import { DutyStatusLogType } from "./DutyStatusLogType";
import { DutyStatusOrigin } from "./DutyStatusOrigin";
import { Device } from "./Device";
import { DutyStatusState } from "./DutyStatusState";
import { DutyStatusMalfunctionTypes } from "./DutyStatusMalfunctionTypes";
import { DutyStatusDeferralType } from "./DutyStatusDeferralType";
import { UserHosRuleSet } from "./UserHosRuleSet";

/**
 *  A DutyStatusLog is a record of duty status for Hours of Service regulations. The log is first required to have a driver, dateTime, status, and device. Location is not required and will be calculated from the device's data.
 */
export interface DutyStatusLog extends EntityWithVersion {
  /**
   * Gets or sets the list of {@link AnnotationLog}(s) which are associated with this
   *  log.
   */
  annotations: AnnotationLog[];
  /** Gets or sets the list of the co-driver {@link User}(s) for this log. */
  coDrivers: User[];
  /** Gets or sets the date and time the log was created. */
  dateTime: Date;
  /** Gets or sets the deferral minutes. */
  deferralMinutes: number;
  /** Gets or sets the {@link DutyStatusDeferralType}. */
  deferralStatus: DutyStatusDeferralType;
  /** Gets or sets the {@link Device} associated with this log. */
  device: Device;
  /** Gets or sets the distance since last valid coordinate measurement. */
  distanceSinceValidCoordinates: number;
  /** Gets or sets the {@link User} who created this log. */
  driver: User;
  /** Gets or sets the date and time the log was edited. If the log has not been edited, this will not be set. */
  editDateTime: Date;
  /** Gets or sets the {@link User} that requested an edit to this log. */
  editRequestedByUser: User;
  /** Gets or sets the engine hours for the {@link DutyStatusLog.Device} at the {@link DutyStatusLog.DateTime} of this log. */
  engineHours: number;
  /** Gets or sets the event checksum of this log. */
  eventCheckSum: number;
  /**
   * Gets or sets the event code of this log
   *  (Table 6; 7.20 of the ELD Final Rule).
   */
  eventCode: number;
  /**
   * Gets the record status number of this log
   *  1 = active
   *  2 = inactive - changed
   *  3 = inactive - change requested
   *  4 = inactive - change rejected.
   */
  eventRecordStatus: number;
  /**
   * Gets or sets the event type number of this log
   *  1 = A change in driver's duty-status
   *  2 = An intermediate log
   *  3 = A change in driver's indication of authorized personal use of CMV or yard moves
   *  4 = A driver's certification/re-certification of records
   *  5 = A driver's login/logout activity
   *  6 = CMV's engine power up / shut down activity
   *  7 = A malfunction or data diagnostic detection occurrence
   *  (Table 6; 7.25 of the ELD Final Rule).
   */
  eventType: number;
  /** Gets or sets the unique identifier for this entity. See {@link Id}. */
  id: string;
  /** Gets or sets if the log is hidden. */
  isHidden: boolean;
  /** Gets or sets if the log is ignored. True means it will not affect the Driver's HOS availability. */
  isIgnored: boolean;
  /** Gets or sets a value indicating whether the log is in transitioning state. */
  isTransitioning: boolean;
  /** Gets or sets an object with the location information for the log data. */
  location: AddressLookupData;
  /**
   * Gets or sets the {@link DutyStatusMalfunctionTypes} of the {@link DutyStatusLog} record. As a flag it can be both a diagnostic and malfunction state
   *  which is used to mark status based records (e.g. "D", "SB") as having a diagnostic or malfunction present at time of recording.
   */
  malfunction: DutyStatusMalfunctionTypes;
  /** Gets or sets the odometer in meters for the {@link DutyStatusLog.Device} at the {@link DutyStatusLog.DateTime} of this log. */
  odometer: number;
  /** Gets or sets the {@link DutyStatusOrigin} from where this log originated. */
  origin: DutyStatusOrigin;
  /**
   * Gets or sets the {@link DutyStatusLog.Id} of the parent {@link DutyStatusLog}.
   *  Used when a DutyStatusLog is edited. When returning history, this field will be populated.
   */
  parentId: string;
  /** Gets or sets the sequence number, which is used to generate the sequence ID. */
  sequence: number;
  /** Gets or sets the {@link DutyStatusState} of the {@link DutyStatusLog} record. */
  state: DutyStatusState;
  /** Gets or sets the {@link DutyStatusLogType} representing the driver's duty status. */
  status: DutyStatusLogType;
  /**
   * Gets or sets the linked {@link UserHosRuleSet}.
   *  This property is only used to link rulesets to log events that affect the driver's operating zone and/or cycle. (Canadian ELD)
   */
  userHosRuleSet: UserHosRuleSet;
  /** Gets or sets the date and time the log was verified. If the log is unverified, this will not be set. */
  verifyDateTime: Date;
  /** Gets or sets the version of the entity. */
  version: number;
}
