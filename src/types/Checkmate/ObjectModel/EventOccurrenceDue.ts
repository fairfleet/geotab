//     This code was generated by a Reinforced.Typings tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

import { Entity } from "./Entity";
import { EventOccurrence } from "./EventOccurrence";

/**
 *  An upcoming event related to ab {@link EventOccurrence}.
 *
 * @deprecated
 */
export interface EventOccurrenceDue extends Entity {
  /** Gets or sets the number of days the event is due in. */
  dueInDays: number;
  /** Gets or sets the engine hours the event is due. */
  dueInEngineHours: string;
  /** Gets or sets the odometer the event is due. */
  dueInOdometer: number;
  /** Gets or sets the date the event is due. */
  dueOnDate: Date;
  /** Gets or sets the event that is due or overdue. */
  eventDue: EventOccurrence;
  /**
   * @inheritdoc
   */
  id: string;
  /** Gets or sets if snoozed is currently active */
  isActiveSnooze: boolean;
  /** Gets or sets if snoozed has not been deactivated */
  isSnoozed: boolean;
  /** Gets or sets the number of days the event is overdue by. */
  overdueByDays: number;
  /** Gets or sets the engine hours the event is overdue by. */
  overdueByEngineHours: string;
  /** Gets or sets the odometer the event is overdue by. */
  overdueByOdometer: number;
  /** Gets or sets the date snoozed */
  snoozedDate: Date;
  /** Gets or sets the date the snoozed is due */
  snoozedDueOn: Date;
  /** Gets or sets the snoozed duration */
  snoozeDuration: number;
}
